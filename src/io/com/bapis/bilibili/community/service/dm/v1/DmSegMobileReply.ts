// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/community/service/dm/v1/DmSegMobileReply.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.community.service.dm.v1";

/** 弹幕渐变色 */
export enum DmColorfulType {
  /** NoneType - 无 */
  NoneType = 0,
  /** VipGradualColor - 大会员渐变色 */
  VipGradualColor = 60001,
  UNRECOGNIZED = -1,
}

export function dmColorfulTypeFromJSON(object: any): DmColorfulType {
  switch (object) {
    case 0:
    case "NoneType":
      return DmColorfulType.NoneType;
    case 60001:
    case "VipGradualColor":
      return DmColorfulType.VipGradualColor;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DmColorfulType.UNRECOGNIZED;
  }
}

export function dmColorfulTypeToJSON(object: DmColorfulType): string {
  switch (object) {
    case DmColorfulType.NoneType:
      return "NoneType";
    case DmColorfulType.VipGradualColor:
      return "VipGradualColor";
    case DmColorfulType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 弹幕分片数据 */
export interface DmSegMobileReply {
  /** 弹幕列表 */
  elems: DanmakuElem[];
  /**
   * 弹幕区状态
   * | 0 | 1 |
   * | :-: | :-: |
   * | 打开 | 关闭弹幕区 |
   */
  state?:
    | number
    | undefined;
  /** ai打分 */
  aiFlag?:
    | DanmakuAIFlag
    | undefined;
  /** 弹幕渐变色配置 */
  colorfulSrc: DmColorful[];
}

/** 弹幕实例 */
export interface DanmakuElem {
  /**
   * 弹幕id
   * @deprecated 精度丢失
   */
  id: bigint;
  /** 弹幕位置：/ms */
  progress?:
    | number
    | undefined;
  /**
   * 弹幕模式
   * | 1 | 4 | 5 | 6 | 7 | 8 | 9 |
   * | :-: | :-: | :-: | :-: | :-: | :-: | :-: |
   * | 普通 | 底部 | 顶部 | 逆向 | 高级 | 代码 | BAS |
   */
  mode: number;
  /** 弹幕字体 */
  fontsize: number;
  /** 弹幕颜色 */
  color: number;
  /** 弹幕发送者crc32哈希 */
  midHash: string;
  /** 弹幕文本内容 */
  content?:
    | string
    | undefined;
  /** 弹幕发送时间  时间戳 */
  ctime: bigint;
  /** 弹幕权重 越高显示优先级越高 */
  weight?:
    | number
    | undefined;
  /** 弹幕动作 */
  action?:
    | string
    | undefined;
  /**
   * 弹幕池
   * | 0 | 1 | 2 |
   * | :-: | :-: | :-: |
   * | 普通弹幕 | 字幕弹幕 | 特殊弹幕 |
   */
  pool?:
    | number
    | undefined;
  /** 弹幕id字符串 */
  idStr: string;
  /**
   * 弹幕属性位
   * | 0 | 1 | 2 |
   * | :-: | :-: | :-: |
   * | 保护弹幕 | 直播弹幕 | 高赞弹幕 |
   */
  attr?:
    | number
    | undefined;
  /** 未知 */
  animation?:
    | string
    | undefined;
  /** 弹幕渐变色 */
  colorful?:
    | DmColorfulType
    | undefined;
  /** 弹幕oid */
  oid: bigint;
}

/** ai云屏蔽弹幕的配置 */
export interface DanmakuAIFlag {
  /** 云屏蔽等级 */
  dmFlags: DanmakuFlag[];
}

/** 云屏蔽等级 */
export interface DanmakuFlag {
  /** dmid 弹幕id */
  dmid: bigint;
  /** 弹幕分 */
  flag: number;
}

/** 弹幕渐变色配置 */
export interface DmColorful {
  /** 弹幕渐变色 */
  type: DmColorfulType;
  /** 渐变色图片 */
  src: string;
}

function createBaseDmSegMobileReply(): DmSegMobileReply {
  return { elems: [], colorfulSrc: [] };
}

export const DmSegMobileReply: MessageFns<DmSegMobileReply> = {
  encode(message: DmSegMobileReply, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.elems) {
      DanmakuElem.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.state !== undefined) {
      writer.uint32(16).int32(message.state);
    }
    if (message.aiFlag !== undefined) {
      DanmakuAIFlag.encode(message.aiFlag, writer.uint32(26).fork()).join();
    }
    for (const v of message.colorfulSrc) {
      DmColorful.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DmSegMobileReply {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDmSegMobileReply();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.elems.push(DanmakuElem.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.state = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.aiFlag = DanmakuAIFlag.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.colorfulSrc.push(DmColorful.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DmSegMobileReply {
    return {
      elems: globalThis.Array.isArray(object?.elems) ? object.elems.map((e: any) => DanmakuElem.fromJSON(e)) : [],
      state: isSet(object.state) ? globalThis.Number(object.state) : undefined,
      aiFlag: isSet(object.aiFlag) ? DanmakuAIFlag.fromJSON(object.aiFlag) : undefined,
      colorfulSrc: globalThis.Array.isArray(object?.colorfulSrc)
        ? object.colorfulSrc.map((e: any) => DmColorful.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DmSegMobileReply): unknown {
    const obj: any = {};
    if (message.elems?.length) {
      obj.elems = message.elems.map((e) => DanmakuElem.toJSON(e));
    }
    if (message.state !== undefined) {
      obj.state = Math.round(message.state);
    }
    if (message.aiFlag !== undefined) {
      obj.aiFlag = DanmakuAIFlag.toJSON(message.aiFlag);
    }
    if (message.colorfulSrc?.length) {
      obj.colorfulSrc = message.colorfulSrc.map((e) => DmColorful.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DmSegMobileReply>, I>>(base?: I): DmSegMobileReply {
    return DmSegMobileReply.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DmSegMobileReply>, I>>(object: I): DmSegMobileReply {
    const message = createBaseDmSegMobileReply();
    message.elems = object.elems?.map((e) => DanmakuElem.fromPartial(e)) || [];
    message.state = object.state ?? undefined;
    message.aiFlag = (object.aiFlag !== undefined && object.aiFlag !== null)
      ? DanmakuAIFlag.fromPartial(object.aiFlag)
      : undefined;
    message.colorfulSrc = object.colorfulSrc?.map((e) => DmColorful.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDanmakuElem(): DanmakuElem {
  return { id: 0n, mode: 0, fontsize: 0, color: 0, midHash: "", ctime: 0n, idStr: "", oid: 0n };
}

export const DanmakuElem: MessageFns<DanmakuElem> = {
  encode(message: DanmakuElem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id);
    }
    if (message.progress !== undefined) {
      writer.uint32(16).int32(message.progress);
    }
    if (message.mode !== 0) {
      writer.uint32(24).int32(message.mode);
    }
    if (message.fontsize !== 0) {
      writer.uint32(32).int32(message.fontsize);
    }
    if (message.color !== 0) {
      writer.uint32(40).uint32(message.color);
    }
    if (message.midHash !== "") {
      writer.uint32(50).string(message.midHash);
    }
    if (message.content !== undefined) {
      writer.uint32(58).string(message.content);
    }
    if (message.ctime !== 0n) {
      if (BigInt.asIntN(64, message.ctime) !== message.ctime) {
        throw new globalThis.Error("value provided for field message.ctime of type int64 too large");
      }
      writer.uint32(64).int64(message.ctime);
    }
    if (message.weight !== undefined) {
      writer.uint32(72).int32(message.weight);
    }
    if (message.action !== undefined) {
      writer.uint32(82).string(message.action);
    }
    if (message.pool !== undefined) {
      writer.uint32(88).int32(message.pool);
    }
    if (message.idStr !== "") {
      writer.uint32(98).string(message.idStr);
    }
    if (message.attr !== undefined) {
      writer.uint32(104).int32(message.attr);
    }
    if (message.animation !== undefined) {
      writer.uint32(178).string(message.animation);
    }
    if (message.colorful !== undefined) {
      writer.uint32(192).int32(message.colorful);
    }
    if (message.oid !== 0n) {
      if (BigInt.asIntN(64, message.oid) !== message.oid) {
        throw new globalThis.Error("value provided for field message.oid of type int64 too large");
      }
      writer.uint32(208).int64(message.oid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DanmakuElem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDanmakuElem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as bigint;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.progress = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fontsize = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.color = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.midHash = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.content = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.ctime = reader.int64() as bigint;
          continue;
        case 9:
          if (tag !== 72) {
            break;
          }

          message.weight = reader.int32();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.action = reader.string();
          continue;
        case 11:
          if (tag !== 88) {
            break;
          }

          message.pool = reader.int32();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.idStr = reader.string();
          continue;
        case 13:
          if (tag !== 104) {
            break;
          }

          message.attr = reader.int32();
          continue;
        case 22:
          if (tag !== 178) {
            break;
          }

          message.animation = reader.string();
          continue;
        case 24:
          if (tag !== 192) {
            break;
          }

          message.colorful = reader.int32() as any;
          continue;
        case 26:
          if (tag !== 208) {
            break;
          }

          message.oid = reader.int64() as bigint;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DanmakuElem {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : undefined,
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      fontsize: isSet(object.fontsize) ? globalThis.Number(object.fontsize) : 0,
      color: isSet(object.color) ? globalThis.Number(object.color) : 0,
      midHash: isSet(object.midHash) ? globalThis.String(object.midHash) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : undefined,
      ctime: isSet(object.ctime) ? BigInt(object.ctime) : 0n,
      weight: isSet(object.weight) ? globalThis.Number(object.weight) : undefined,
      action: isSet(object.action) ? globalThis.String(object.action) : undefined,
      pool: isSet(object.pool) ? globalThis.Number(object.pool) : undefined,
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
      attr: isSet(object.attr) ? globalThis.Number(object.attr) : undefined,
      animation: isSet(object.animation) ? globalThis.String(object.animation) : undefined,
      colorful: isSet(object.colorful) ? dmColorfulTypeFromJSON(object.colorful) : undefined,
      oid: isSet(object.oid) ? BigInt(object.oid) : 0n,
    };
  },

  toJSON(message: DanmakuElem): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.progress !== undefined) {
      obj.progress = Math.round(message.progress);
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.fontsize !== 0) {
      obj.fontsize = Math.round(message.fontsize);
    }
    if (message.color !== 0) {
      obj.color = Math.round(message.color);
    }
    if (message.midHash !== "") {
      obj.midHash = message.midHash;
    }
    if (message.content !== undefined) {
      obj.content = message.content;
    }
    if (message.ctime !== 0n) {
      obj.ctime = message.ctime.toString();
    }
    if (message.weight !== undefined) {
      obj.weight = Math.round(message.weight);
    }
    if (message.action !== undefined) {
      obj.action = message.action;
    }
    if (message.pool !== undefined) {
      obj.pool = Math.round(message.pool);
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    if (message.attr !== undefined) {
      obj.attr = Math.round(message.attr);
    }
    if (message.animation !== undefined) {
      obj.animation = message.animation;
    }
    if (message.colorful !== undefined) {
      obj.colorful = dmColorfulTypeToJSON(message.colorful);
    }
    if (message.oid !== 0n) {
      obj.oid = message.oid.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DanmakuElem>, I>>(base?: I): DanmakuElem {
    return DanmakuElem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DanmakuElem>, I>>(object: I): DanmakuElem {
    const message = createBaseDanmakuElem();
    message.id = object.id ?? 0n;
    message.progress = object.progress ?? undefined;
    message.mode = object.mode ?? 0;
    message.fontsize = object.fontsize ?? 0;
    message.color = object.color ?? 0;
    message.midHash = object.midHash ?? "";
    message.content = object.content ?? undefined;
    message.ctime = object.ctime ?? 0n;
    message.weight = object.weight ?? undefined;
    message.action = object.action ?? undefined;
    message.pool = object.pool ?? undefined;
    message.idStr = object.idStr ?? "";
    message.attr = object.attr ?? undefined;
    message.animation = object.animation ?? undefined;
    message.colorful = object.colorful ?? undefined;
    message.oid = object.oid ?? 0n;
    return message;
  },
};

function createBaseDanmakuAIFlag(): DanmakuAIFlag {
  return { dmFlags: [] };
}

export const DanmakuAIFlag: MessageFns<DanmakuAIFlag> = {
  encode(message: DanmakuAIFlag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.dmFlags) {
      DanmakuFlag.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DanmakuAIFlag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDanmakuAIFlag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.dmFlags.push(DanmakuFlag.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DanmakuAIFlag {
    return {
      dmFlags: globalThis.Array.isArray(object?.dmFlags) ? object.dmFlags.map((e: any) => DanmakuFlag.fromJSON(e)) : [],
    };
  },

  toJSON(message: DanmakuAIFlag): unknown {
    const obj: any = {};
    if (message.dmFlags?.length) {
      obj.dmFlags = message.dmFlags.map((e) => DanmakuFlag.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DanmakuAIFlag>, I>>(base?: I): DanmakuAIFlag {
    return DanmakuAIFlag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DanmakuAIFlag>, I>>(object: I): DanmakuAIFlag {
    const message = createBaseDanmakuAIFlag();
    message.dmFlags = object.dmFlags?.map((e) => DanmakuFlag.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDanmakuFlag(): DanmakuFlag {
  return { dmid: 0n, flag: 0 };
}

export const DanmakuFlag: MessageFns<DanmakuFlag> = {
  encode(message: DanmakuFlag, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.dmid !== 0n) {
      if (BigInt.asIntN(64, message.dmid) !== message.dmid) {
        throw new globalThis.Error("value provided for field message.dmid of type int64 too large");
      }
      writer.uint32(8).int64(message.dmid);
    }
    if (message.flag !== 0) {
      writer.uint32(16).uint32(message.flag);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DanmakuFlag {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDanmakuFlag();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.dmid = reader.int64() as bigint;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.flag = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DanmakuFlag {
    return {
      dmid: isSet(object.dmid) ? BigInt(object.dmid) : 0n,
      flag: isSet(object.flag) ? globalThis.Number(object.flag) : 0,
    };
  },

  toJSON(message: DanmakuFlag): unknown {
    const obj: any = {};
    if (message.dmid !== 0n) {
      obj.dmid = message.dmid.toString();
    }
    if (message.flag !== 0) {
      obj.flag = Math.round(message.flag);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DanmakuFlag>, I>>(base?: I): DanmakuFlag {
    return DanmakuFlag.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DanmakuFlag>, I>>(object: I): DanmakuFlag {
    const message = createBaseDanmakuFlag();
    message.dmid = object.dmid ?? 0n;
    message.flag = object.flag ?? 0;
    return message;
  },
};

function createBaseDmColorful(): DmColorful {
  return { type: 0, src: "" };
}

export const DmColorful: MessageFns<DmColorful> = {
  encode(message: DmColorful, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.src !== "") {
      writer.uint32(18).string(message.src);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DmColorful {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDmColorful();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.src = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DmColorful {
    return {
      type: isSet(object.type) ? dmColorfulTypeFromJSON(object.type) : 0,
      src: isSet(object.src) ? globalThis.String(object.src) : "",
    };
  },

  toJSON(message: DmColorful): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = dmColorfulTypeToJSON(message.type);
    }
    if (message.src !== "") {
      obj.src = message.src;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DmColorful>, I>>(base?: I): DmColorful {
    return DmColorful.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DmColorful>, I>>(object: I): DmColorful {
    const message = createBaseDmColorful();
    message.type = object.type ?? 0;
    message.src = object.src ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
