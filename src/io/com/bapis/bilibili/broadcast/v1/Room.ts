// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/broadcast/v1/Room.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
import { Status } from "../../rpc/status";

export const protobufPackage = "bilibili.broadcast.v1";

export interface RoomReq {
  /** {type}://{room_id} */
  id: string;
  join?: RoomJoinEvent | undefined;
  leave?: RoomLeaveEvent | undefined;
  online?: RoomOnlineEvent | undefined;
  msg?: RoomMessageEvent | undefined;
}

export interface RoomResp {
  /** {type}://{room_id} */
  id: string;
  join?: RoomJoinEvent | undefined;
  leave?: RoomLeaveEvent | undefined;
  online?: RoomOnlineEvent | undefined;
  msg?: RoomMessageEvent | undefined;
  err?: RoomErrorEvent | undefined;
}

export interface RoomJoinEvent {
}

export interface RoomLeaveEvent {
}

export interface RoomOnlineEvent {
  online: number;
}

export interface RoomMessageEvent {
  targetPath: string;
  body: Any | undefined;
}

export interface RoomErrorEvent {
  status: Status | undefined;
}

function createBaseRoomReq(): RoomReq {
  return { id: "" };
}

export const RoomReq: MessageFns<RoomReq> = {
  encode(message: RoomReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.join !== undefined) {
      RoomJoinEvent.encode(message.join, writer.uint32(18).fork()).join();
    }
    if (message.leave !== undefined) {
      RoomLeaveEvent.encode(message.leave, writer.uint32(26).fork()).join();
    }
    if (message.online !== undefined) {
      RoomOnlineEvent.encode(message.online, writer.uint32(34).fork()).join();
    }
    if (message.msg !== undefined) {
      RoomMessageEvent.encode(message.msg, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.join = RoomJoinEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leave = RoomLeaveEvent.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.online = RoomOnlineEvent.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.msg = RoomMessageEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomReq {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      join: isSet(object.join) ? RoomJoinEvent.fromJSON(object.join) : undefined,
      leave: isSet(object.leave) ? RoomLeaveEvent.fromJSON(object.leave) : undefined,
      online: isSet(object.online) ? RoomOnlineEvent.fromJSON(object.online) : undefined,
      msg: isSet(object.msg) ? RoomMessageEvent.fromJSON(object.msg) : undefined,
    };
  },

  toJSON(message: RoomReq): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.join !== undefined) {
      obj.join = RoomJoinEvent.toJSON(message.join);
    }
    if (message.leave !== undefined) {
      obj.leave = RoomLeaveEvent.toJSON(message.leave);
    }
    if (message.online !== undefined) {
      obj.online = RoomOnlineEvent.toJSON(message.online);
    }
    if (message.msg !== undefined) {
      obj.msg = RoomMessageEvent.toJSON(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomReq>, I>>(base?: I): RoomReq {
    return RoomReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomReq>, I>>(object: I): RoomReq {
    const message = createBaseRoomReq();
    message.id = object.id ?? "";
    message.join = (object.join !== undefined && object.join !== null)
      ? RoomJoinEvent.fromPartial(object.join)
      : undefined;
    message.leave = (object.leave !== undefined && object.leave !== null)
      ? RoomLeaveEvent.fromPartial(object.leave)
      : undefined;
    message.online = (object.online !== undefined && object.online !== null)
      ? RoomOnlineEvent.fromPartial(object.online)
      : undefined;
    message.msg = (object.msg !== undefined && object.msg !== null)
      ? RoomMessageEvent.fromPartial(object.msg)
      : undefined;
    return message;
  },
};

function createBaseRoomResp(): RoomResp {
  return { id: "" };
}

export const RoomResp: MessageFns<RoomResp> = {
  encode(message: RoomResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.join !== undefined) {
      RoomJoinEvent.encode(message.join, writer.uint32(18).fork()).join();
    }
    if (message.leave !== undefined) {
      RoomLeaveEvent.encode(message.leave, writer.uint32(26).fork()).join();
    }
    if (message.online !== undefined) {
      RoomOnlineEvent.encode(message.online, writer.uint32(34).fork()).join();
    }
    if (message.msg !== undefined) {
      RoomMessageEvent.encode(message.msg, writer.uint32(42).fork()).join();
    }
    if (message.err !== undefined) {
      RoomErrorEvent.encode(message.err, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.join = RoomJoinEvent.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.leave = RoomLeaveEvent.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.online = RoomOnlineEvent.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.msg = RoomMessageEvent.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.err = RoomErrorEvent.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomResp {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      join: isSet(object.join) ? RoomJoinEvent.fromJSON(object.join) : undefined,
      leave: isSet(object.leave) ? RoomLeaveEvent.fromJSON(object.leave) : undefined,
      online: isSet(object.online) ? RoomOnlineEvent.fromJSON(object.online) : undefined,
      msg: isSet(object.msg) ? RoomMessageEvent.fromJSON(object.msg) : undefined,
      err: isSet(object.err) ? RoomErrorEvent.fromJSON(object.err) : undefined,
    };
  },

  toJSON(message: RoomResp): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.join !== undefined) {
      obj.join = RoomJoinEvent.toJSON(message.join);
    }
    if (message.leave !== undefined) {
      obj.leave = RoomLeaveEvent.toJSON(message.leave);
    }
    if (message.online !== undefined) {
      obj.online = RoomOnlineEvent.toJSON(message.online);
    }
    if (message.msg !== undefined) {
      obj.msg = RoomMessageEvent.toJSON(message.msg);
    }
    if (message.err !== undefined) {
      obj.err = RoomErrorEvent.toJSON(message.err);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomResp>, I>>(base?: I): RoomResp {
    return RoomResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomResp>, I>>(object: I): RoomResp {
    const message = createBaseRoomResp();
    message.id = object.id ?? "";
    message.join = (object.join !== undefined && object.join !== null)
      ? RoomJoinEvent.fromPartial(object.join)
      : undefined;
    message.leave = (object.leave !== undefined && object.leave !== null)
      ? RoomLeaveEvent.fromPartial(object.leave)
      : undefined;
    message.online = (object.online !== undefined && object.online !== null)
      ? RoomOnlineEvent.fromPartial(object.online)
      : undefined;
    message.msg = (object.msg !== undefined && object.msg !== null)
      ? RoomMessageEvent.fromPartial(object.msg)
      : undefined;
    message.err = (object.err !== undefined && object.err !== null)
      ? RoomErrorEvent.fromPartial(object.err)
      : undefined;
    return message;
  },
};

function createBaseRoomJoinEvent(): RoomJoinEvent {
  return {};
}

export const RoomJoinEvent: MessageFns<RoomJoinEvent> = {
  encode(_: RoomJoinEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomJoinEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomJoinEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RoomJoinEvent {
    return {};
  },

  toJSON(_: RoomJoinEvent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomJoinEvent>, I>>(base?: I): RoomJoinEvent {
    return RoomJoinEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomJoinEvent>, I>>(_: I): RoomJoinEvent {
    const message = createBaseRoomJoinEvent();
    return message;
  },
};

function createBaseRoomLeaveEvent(): RoomLeaveEvent {
  return {};
}

export const RoomLeaveEvent: MessageFns<RoomLeaveEvent> = {
  encode(_: RoomLeaveEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomLeaveEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomLeaveEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): RoomLeaveEvent {
    return {};
  },

  toJSON(_: RoomLeaveEvent): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomLeaveEvent>, I>>(base?: I): RoomLeaveEvent {
    return RoomLeaveEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomLeaveEvent>, I>>(_: I): RoomLeaveEvent {
    const message = createBaseRoomLeaveEvent();
    return message;
  },
};

function createBaseRoomOnlineEvent(): RoomOnlineEvent {
  return { online: 0 };
}

export const RoomOnlineEvent: MessageFns<RoomOnlineEvent> = {
  encode(message: RoomOnlineEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.online !== 0) {
      writer.uint32(8).int32(message.online);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomOnlineEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomOnlineEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.online = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomOnlineEvent {
    return { online: isSet(object.online) ? globalThis.Number(object.online) : 0 };
  },

  toJSON(message: RoomOnlineEvent): unknown {
    const obj: any = {};
    if (message.online !== 0) {
      obj.online = Math.round(message.online);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomOnlineEvent>, I>>(base?: I): RoomOnlineEvent {
    return RoomOnlineEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomOnlineEvent>, I>>(object: I): RoomOnlineEvent {
    const message = createBaseRoomOnlineEvent();
    message.online = object.online ?? 0;
    return message;
  },
};

function createBaseRoomMessageEvent(): RoomMessageEvent {
  return { targetPath: "", body: undefined };
}

export const RoomMessageEvent: MessageFns<RoomMessageEvent> = {
  encode(message: RoomMessageEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.targetPath !== "") {
      writer.uint32(10).string(message.targetPath);
    }
    if (message.body !== undefined) {
      Any.encode(message.body, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomMessageEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomMessageEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetPath = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.body = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomMessageEvent {
    return {
      targetPath: isSet(object.targetPath) ? globalThis.String(object.targetPath) : "",
      body: isSet(object.body) ? Any.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: RoomMessageEvent): unknown {
    const obj: any = {};
    if (message.targetPath !== "") {
      obj.targetPath = message.targetPath;
    }
    if (message.body !== undefined) {
      obj.body = Any.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomMessageEvent>, I>>(base?: I): RoomMessageEvent {
    return RoomMessageEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomMessageEvent>, I>>(object: I): RoomMessageEvent {
    const message = createBaseRoomMessageEvent();
    message.targetPath = object.targetPath ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? Any.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseRoomErrorEvent(): RoomErrorEvent {
  return { status: undefined };
}

export const RoomErrorEvent: MessageFns<RoomErrorEvent> = {
  encode(message: RoomErrorEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomErrorEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomErrorEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomErrorEvent {
    return { status: isSet(object.status) ? Status.fromJSON(object.status) : undefined };
  },

  toJSON(message: RoomErrorEvent): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RoomErrorEvent>, I>>(base?: I): RoomErrorEvent {
    return RoomErrorEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RoomErrorEvent>, I>>(object: I): RoomErrorEvent {
    const message = createBaseRoomErrorEvent();
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
