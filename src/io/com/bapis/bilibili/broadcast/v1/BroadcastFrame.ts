// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/broadcast/v1/BroadcastFrame.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../../google/protobuf/any";
import { Status } from "../../rpc/status";

export const protobufPackage = "bilibili.broadcast.v1";

export interface BroadcastFrame {
  /** 请求消息信息 */
  options:
    | FrameOption
    | undefined;
  /** 业务target_path */
  targetPath: string;
  /** 务pb内容 */
  body: Any | undefined;
}

/** 请求消息信息 */
export interface FrameOption {
  /**
   * 消息id
   * | | |
   * | :-: | :-: |
   * | client | 本次连接唯一的消息id，可用于回执 |
   * | server | 唯一消息id，可用于上报或者回执 |
   */
  messageId?:
    | bigint
    | undefined;
  /**
   * frame序号
   * | | |
   * | :-: | :-: |
   * | client | 客户端应该每次请求时frame seq++，会返回对应的对称req/resp |
   * | server | 服务端下行消息，只会返回默认值：0 |
   */
  sequence: bigint;
  /**
   * 是否进行消息回执(发出MessageAckReq)
   * downstream 上只有服务端设置为true，客户端响应
   * upstream   上只有客户端设置为true，服务端响应
   * 响应帧禁止设置is_ack，协议上禁止循环
   * 通常只有业务帧才可能设置is_ack, 因为协议栈(例如心跳、鉴权)另有响应约定
   */
  isAck?:
    | boolean
    | undefined;
  /** 业务状态码 */
  status?:
    | Status
    | undefined;
  /** 业务ack来源, 仅downstream时候由服务端填写. */
  ackOrigin?: string | undefined;
}

function createBaseBroadcastFrame(): BroadcastFrame {
  return { options: undefined, targetPath: "", body: undefined };
}

export const BroadcastFrame: MessageFns<BroadcastFrame> = {
  encode(message: BroadcastFrame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.options !== undefined) {
      FrameOption.encode(message.options, writer.uint32(10).fork()).join();
    }
    if (message.targetPath !== "") {
      writer.uint32(18).string(message.targetPath);
    }
    if (message.body !== undefined) {
      Any.encode(message.body, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BroadcastFrame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBroadcastFrame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.options = FrameOption.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.targetPath = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.body = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BroadcastFrame {
    return {
      options: isSet(object.options) ? FrameOption.fromJSON(object.options) : undefined,
      targetPath: isSet(object.targetPath) ? globalThis.String(object.targetPath) : "",
      body: isSet(object.body) ? Any.fromJSON(object.body) : undefined,
    };
  },

  toJSON(message: BroadcastFrame): unknown {
    const obj: any = {};
    if (message.options !== undefined) {
      obj.options = FrameOption.toJSON(message.options);
    }
    if (message.targetPath !== "") {
      obj.targetPath = message.targetPath;
    }
    if (message.body !== undefined) {
      obj.body = Any.toJSON(message.body);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BroadcastFrame>, I>>(base?: I): BroadcastFrame {
    return BroadcastFrame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BroadcastFrame>, I>>(object: I): BroadcastFrame {
    const message = createBaseBroadcastFrame();
    message.options = (object.options !== undefined && object.options !== null)
      ? FrameOption.fromPartial(object.options)
      : undefined;
    message.targetPath = object.targetPath ?? "";
    message.body = (object.body !== undefined && object.body !== null) ? Any.fromPartial(object.body) : undefined;
    return message;
  },
};

function createBaseFrameOption(): FrameOption {
  return { sequence: 0n };
}

export const FrameOption: MessageFns<FrameOption> = {
  encode(message: FrameOption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.messageId !== undefined) {
      if (BigInt.asIntN(64, message.messageId) !== message.messageId) {
        throw new globalThis.Error("value provided for field message.messageId of type int64 too large");
      }
      writer.uint32(8).int64(message.messageId);
    }
    if (message.sequence !== 0n) {
      if (BigInt.asIntN(64, message.sequence) !== message.sequence) {
        throw new globalThis.Error("value provided for field message.sequence of type int64 too large");
      }
      writer.uint32(16).int64(message.sequence);
    }
    if (message.isAck !== undefined) {
      writer.uint32(24).bool(message.isAck);
    }
    if (message.status !== undefined) {
      Status.encode(message.status, writer.uint32(34).fork()).join();
    }
    if (message.ackOrigin !== undefined) {
      writer.uint32(42).string(message.ackOrigin);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FrameOption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFrameOption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.messageId = reader.int64() as bigint;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.sequence = reader.int64() as bigint;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isAck = reader.bool();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.status = Status.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.ackOrigin = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FrameOption {
    return {
      messageId: isSet(object.messageId) ? BigInt(object.messageId) : undefined,
      sequence: isSet(object.sequence) ? BigInt(object.sequence) : 0n,
      isAck: isSet(object.isAck) ? globalThis.Boolean(object.isAck) : undefined,
      status: isSet(object.status) ? Status.fromJSON(object.status) : undefined,
      ackOrigin: isSet(object.ackOrigin) ? globalThis.String(object.ackOrigin) : undefined,
    };
  },

  toJSON(message: FrameOption): unknown {
    const obj: any = {};
    if (message.messageId !== undefined) {
      obj.messageId = message.messageId.toString();
    }
    if (message.sequence !== 0n) {
      obj.sequence = message.sequence.toString();
    }
    if (message.isAck !== undefined) {
      obj.isAck = message.isAck;
    }
    if (message.status !== undefined) {
      obj.status = Status.toJSON(message.status);
    }
    if (message.ackOrigin !== undefined) {
      obj.ackOrigin = message.ackOrigin;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FrameOption>, I>>(base?: I): FrameOption {
    return FrameOption.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FrameOption>, I>>(object: I): FrameOption {
    const message = createBaseFrameOption();
    message.messageId = object.messageId ?? undefined;
    message.sequence = object.sequence ?? 0n;
    message.isAck = object.isAck ?? undefined;
    message.status = (object.status !== undefined && object.status !== null)
      ? Status.fromPartial(object.status)
      : undefined;
    message.ackOrigin = object.ackOrigin ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
