// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/broadcast/v1/Auth.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.broadcast.v1";

/** 鉴权请求，通过authorization验证绑定用户mid */
export interface AuthReq {
  /** 冷启动id，算法uuid，重新起启会变 */
  guid: string;
  /** 连接id，算法uuid，重连会变 */
  connId: string;
  /** 最后收到的消息id，用于过虑重连后获取未读的消息 */
  lastMsgId: bigint;
}

/** 鉴权返回 */
export interface AuthResp {
}

function createBaseAuthReq(): AuthReq {
  return { guid: "", connId: "", lastMsgId: 0n };
}

export const AuthReq: MessageFns<AuthReq> = {
  encode(message: AuthReq, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.guid !== "") {
      writer.uint32(10).string(message.guid);
    }
    if (message.connId !== "") {
      writer.uint32(18).string(message.connId);
    }
    if (message.lastMsgId !== 0n) {
      if (BigInt.asIntN(64, message.lastMsgId) !== message.lastMsgId) {
        throw new globalThis.Error("value provided for field message.lastMsgId of type int64 too large");
      }
      writer.uint32(24).int64(message.lastMsgId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthReq {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthReq();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.guid = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.connId = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.lastMsgId = reader.int64() as bigint;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AuthReq {
    return {
      guid: isSet(object.guid) ? globalThis.String(object.guid) : "",
      connId: isSet(object.connId) ? globalThis.String(object.connId) : "",
      lastMsgId: isSet(object.lastMsgId) ? BigInt(object.lastMsgId) : 0n,
    };
  },

  toJSON(message: AuthReq): unknown {
    const obj: any = {};
    if (message.guid !== "") {
      obj.guid = message.guid;
    }
    if (message.connId !== "") {
      obj.connId = message.connId;
    }
    if (message.lastMsgId !== 0n) {
      obj.lastMsgId = message.lastMsgId.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthReq>, I>>(base?: I): AuthReq {
    return AuthReq.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthReq>, I>>(object: I): AuthReq {
    const message = createBaseAuthReq();
    message.guid = object.guid ?? "";
    message.connId = object.connId ?? "";
    message.lastMsgId = object.lastMsgId ?? 0n;
    return message;
  },
};

function createBaseAuthResp(): AuthResp {
  return {};
}

export const AuthResp: MessageFns<AuthResp> = {
  encode(_: AuthResp, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AuthResp {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAuthResp();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): AuthResp {
    return {};
  },

  toJSON(_: AuthResp): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<AuthResp>, I>>(base?: I): AuthResp {
    return AuthResp.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<AuthResp>, I>>(_: I): AuthResp {
    const message = createBaseAuthResp();
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
