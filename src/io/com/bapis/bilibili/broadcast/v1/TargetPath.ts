// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/broadcast/v1/TargetPath.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.broadcast.v1";

/** 业务target_path */
export interface TargetPath {
  /** 需要订阅的target_paths */
  targetPaths: string[];
}

function createBaseTargetPath(): TargetPath {
  return { targetPaths: [] };
}

export const TargetPath: MessageFns<TargetPath> = {
  encode(message: TargetPath, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.targetPaths) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TargetPath {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTargetPath();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.targetPaths.push(reader.string());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TargetPath {
    return {
      targetPaths: globalThis.Array.isArray(object?.targetPaths)
        ? object.targetPaths.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: TargetPath): unknown {
    const obj: any = {};
    if (message.targetPaths?.length) {
      obj.targetPaths = message.targetPaths;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TargetPath>, I>>(base?: I): TargetPath {
    return TargetPath.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TargetPath>, I>>(object: I): TargetPath {
    const message = createBaseTargetPath();
    message.targetPaths = object.targetPaths?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
