// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/broadcast/message/main/DanmakuEvent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.broadcast.message.main";

/** 弹幕消息数据 */
export interface DanmakuEvent {
  /** 弹幕列表 */
  elems: DanmakuElem[];
}

/** 弹幕实例 */
export interface DanmakuElem {
  /**
   * 弹幕id
   * @deprecated 精度丢失
   */
  id: bigint;
  /** 弹幕位置：/ms */
  progress: number;
  /**
   * 弹幕模式
   * | 1 | 4 | 5 | 6 | 7 | 8 | 9 |
   * | :-: | :-: | :-: | :-: | :-: | :-: | :-: |
   * | 普通 | 底部 | 顶部 | 逆向 | 高级 | 代码 | BAS |
   */
  mode: number;
  /** 弹幕字体 */
  fontsize: number;
  /** 弹幕颜色 */
  color: number;
  /** 弹幕发送者crc32哈希 */
  midHash: string;
  /** 弹幕文本内容 */
  content: string;
  /** 弹幕发送时间  时间戳 */
  ctime: bigint;
  /** 弹幕动作 */
  action?:
    | string
    | undefined;
  /**
   * 弹幕池
   * | 0 | 1 | 2 |
   * | :-: | :-: | :-: |
   * | 普通弹幕 | 字幕弹幕 | 特殊弹幕 |
   */
  pool?:
    | number
    | undefined;
  /** 弹幕id字符串 */
  idStr: string;
}

/** 指令弹幕 */
export interface CommandDm {
  /** 弹幕id */
  id: bigint;
  /** oid */
  oid: bigint;
  /** mid */
  mid: bigint;
  type: number;
  /** 弹幕指令 */
  command: string;
  /** 弹幕内容 */
  content: string;
  /** 弹幕状态 */
  state: number;
  /** 弹幕位置：/ms */
  progress: number;
  /** 创建时间 */
  ctime: string;
  /** 修改时间 */
  mtime: string;
  /** 扩展json数据 */
  extra: string;
  /** 弹幕id_str */
  idStr: string;
}

function createBaseDanmakuEvent(): DanmakuEvent {
  return { elems: [] };
}

export const DanmakuEvent: MessageFns<DanmakuEvent> = {
  encode(message: DanmakuEvent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.elems) {
      DanmakuElem.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DanmakuEvent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDanmakuEvent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.elems.push(DanmakuElem.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DanmakuEvent {
    return {
      elems: globalThis.Array.isArray(object?.elems) ? object.elems.map((e: any) => DanmakuElem.fromJSON(e)) : [],
    };
  },

  toJSON(message: DanmakuEvent): unknown {
    const obj: any = {};
    if (message.elems?.length) {
      obj.elems = message.elems.map((e) => DanmakuElem.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DanmakuEvent>, I>>(base?: I): DanmakuEvent {
    return DanmakuEvent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DanmakuEvent>, I>>(object: I): DanmakuEvent {
    const message = createBaseDanmakuEvent();
    message.elems = object.elems?.map((e) => DanmakuElem.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDanmakuElem(): DanmakuElem {
  return { id: 0n, progress: 0, mode: 0, fontsize: 0, color: 0, midHash: "", content: "", ctime: 0n, idStr: "" };
}

export const DanmakuElem: MessageFns<DanmakuElem> = {
  encode(message: DanmakuElem, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id);
    }
    if (message.progress !== 0) {
      writer.uint32(16).int32(message.progress);
    }
    if (message.mode !== 0) {
      writer.uint32(24).int32(message.mode);
    }
    if (message.fontsize !== 0) {
      writer.uint32(32).int32(message.fontsize);
    }
    if (message.color !== 0) {
      writer.uint32(40).uint32(message.color);
    }
    if (message.midHash !== "") {
      writer.uint32(50).string(message.midHash);
    }
    if (message.content !== "") {
      writer.uint32(58).string(message.content);
    }
    if (message.ctime !== 0n) {
      if (BigInt.asIntN(64, message.ctime) !== message.ctime) {
        throw new globalThis.Error("value provided for field message.ctime of type int64 too large");
      }
      writer.uint32(64).int64(message.ctime);
    }
    if (message.action !== undefined) {
      writer.uint32(74).string(message.action);
    }
    if (message.pool !== undefined) {
      writer.uint32(80).int32(message.pool);
    }
    if (message.idStr !== "") {
      writer.uint32(90).string(message.idStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DanmakuElem {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDanmakuElem();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as bigint;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.progress = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mode = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.fontsize = reader.int32();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.color = reader.uint32();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.midHash = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.content = reader.string();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.ctime = reader.int64() as bigint;
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.action = reader.string();
          continue;
        case 10:
          if (tag !== 80) {
            break;
          }

          message.pool = reader.int32();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.idStr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DanmakuElem {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
      mode: isSet(object.mode) ? globalThis.Number(object.mode) : 0,
      fontsize: isSet(object.fontsize) ? globalThis.Number(object.fontsize) : 0,
      color: isSet(object.color) ? globalThis.Number(object.color) : 0,
      midHash: isSet(object.midHash) ? globalThis.String(object.midHash) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      ctime: isSet(object.ctime) ? BigInt(object.ctime) : 0n,
      action: isSet(object.action) ? globalThis.String(object.action) : undefined,
      pool: isSet(object.pool) ? globalThis.Number(object.pool) : undefined,
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
    };
  },

  toJSON(message: DanmakuElem): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.progress !== 0) {
      obj.progress = Math.round(message.progress);
    }
    if (message.mode !== 0) {
      obj.mode = Math.round(message.mode);
    }
    if (message.fontsize !== 0) {
      obj.fontsize = Math.round(message.fontsize);
    }
    if (message.color !== 0) {
      obj.color = Math.round(message.color);
    }
    if (message.midHash !== "") {
      obj.midHash = message.midHash;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.ctime !== 0n) {
      obj.ctime = message.ctime.toString();
    }
    if (message.action !== undefined) {
      obj.action = message.action;
    }
    if (message.pool !== undefined) {
      obj.pool = Math.round(message.pool);
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DanmakuElem>, I>>(base?: I): DanmakuElem {
    return DanmakuElem.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DanmakuElem>, I>>(object: I): DanmakuElem {
    const message = createBaseDanmakuElem();
    message.id = object.id ?? 0n;
    message.progress = object.progress ?? 0;
    message.mode = object.mode ?? 0;
    message.fontsize = object.fontsize ?? 0;
    message.color = object.color ?? 0;
    message.midHash = object.midHash ?? "";
    message.content = object.content ?? "";
    message.ctime = object.ctime ?? 0n;
    message.action = object.action ?? undefined;
    message.pool = object.pool ?? undefined;
    message.idStr = object.idStr ?? "";
    return message;
  },
};

function createBaseCommandDm(): CommandDm {
  return {
    id: 0n,
    oid: 0n,
    mid: 0n,
    type: 0,
    command: "",
    content: "",
    state: 0,
    progress: 0,
    ctime: "",
    mtime: "",
    extra: "",
    idStr: "",
  };
}

export const CommandDm: MessageFns<CommandDm> = {
  encode(message: CommandDm, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0n) {
      if (BigInt.asIntN(64, message.id) !== message.id) {
        throw new globalThis.Error("value provided for field message.id of type int64 too large");
      }
      writer.uint32(8).int64(message.id);
    }
    if (message.oid !== 0n) {
      if (BigInt.asIntN(64, message.oid) !== message.oid) {
        throw new globalThis.Error("value provided for field message.oid of type int64 too large");
      }
      writer.uint32(16).int64(message.oid);
    }
    if (message.mid !== 0n) {
      if (BigInt.asIntN(64, message.mid) !== message.mid) {
        throw new globalThis.Error("value provided for field message.mid of type int64 too large");
      }
      writer.uint32(24).int64(message.mid);
    }
    if (message.type !== 0) {
      writer.uint32(32).int32(message.type);
    }
    if (message.command !== "") {
      writer.uint32(42).string(message.command);
    }
    if (message.content !== "") {
      writer.uint32(50).string(message.content);
    }
    if (message.state !== 0) {
      writer.uint32(56).int32(message.state);
    }
    if (message.progress !== 0) {
      writer.uint32(64).int32(message.progress);
    }
    if (message.ctime !== "") {
      writer.uint32(74).string(message.ctime);
    }
    if (message.mtime !== "") {
      writer.uint32(82).string(message.mtime);
    }
    if (message.extra !== "") {
      writer.uint32(90).string(message.extra);
    }
    if (message.idStr !== "") {
      writer.uint32(98).string(message.idStr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CommandDm {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCommandDm();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.id = reader.int64() as bigint;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.oid = reader.int64() as bigint;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.mid = reader.int64() as bigint;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.type = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.command = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.content = reader.string();
          continue;
        case 7:
          if (tag !== 56) {
            break;
          }

          message.state = reader.int32();
          continue;
        case 8:
          if (tag !== 64) {
            break;
          }

          message.progress = reader.int32();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.ctime = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.mtime = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.extra = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.idStr = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CommandDm {
    return {
      id: isSet(object.id) ? BigInt(object.id) : 0n,
      oid: isSet(object.oid) ? BigInt(object.oid) : 0n,
      mid: isSet(object.mid) ? BigInt(object.mid) : 0n,
      type: isSet(object.type) ? globalThis.Number(object.type) : 0,
      command: isSet(object.command) ? globalThis.String(object.command) : "",
      content: isSet(object.content) ? globalThis.String(object.content) : "",
      state: isSet(object.state) ? globalThis.Number(object.state) : 0,
      progress: isSet(object.progress) ? globalThis.Number(object.progress) : 0,
      ctime: isSet(object.ctime) ? globalThis.String(object.ctime) : "",
      mtime: isSet(object.mtime) ? globalThis.String(object.mtime) : "",
      extra: isSet(object.extra) ? globalThis.String(object.extra) : "",
      idStr: isSet(object.idStr) ? globalThis.String(object.idStr) : "",
    };
  },

  toJSON(message: CommandDm): unknown {
    const obj: any = {};
    if (message.id !== 0n) {
      obj.id = message.id.toString();
    }
    if (message.oid !== 0n) {
      obj.oid = message.oid.toString();
    }
    if (message.mid !== 0n) {
      obj.mid = message.mid.toString();
    }
    if (message.type !== 0) {
      obj.type = Math.round(message.type);
    }
    if (message.command !== "") {
      obj.command = message.command;
    }
    if (message.content !== "") {
      obj.content = message.content;
    }
    if (message.state !== 0) {
      obj.state = Math.round(message.state);
    }
    if (message.progress !== 0) {
      obj.progress = Math.round(message.progress);
    }
    if (message.ctime !== "") {
      obj.ctime = message.ctime;
    }
    if (message.mtime !== "") {
      obj.mtime = message.mtime;
    }
    if (message.extra !== "") {
      obj.extra = message.extra;
    }
    if (message.idStr !== "") {
      obj.idStr = message.idStr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CommandDm>, I>>(base?: I): CommandDm {
    return CommandDm.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CommandDm>, I>>(object: I): CommandDm {
    const message = createBaseCommandDm();
    message.id = object.id ?? 0n;
    message.oid = object.oid ?? 0n;
    message.mid = object.mid ?? 0n;
    message.type = object.type ?? 0;
    message.command = object.command ?? "";
    message.content = object.content ?? "";
    message.state = object.state ?? 0;
    message.progress = object.progress ?? 0;
    message.ctime = object.ctime ?? "";
    message.mtime = object.mtime ?? "";
    message.extra = object.extra ?? "";
    message.idStr = object.idStr ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
