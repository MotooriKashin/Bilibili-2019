// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/metadata/Device.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.metadata.device";

/** 设备信息 */
export interface Device {
  /**
   * 产品编号
   * | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 |
   * | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: | :-: |
   * | 粉 | 白 | 蓝 | 直播姬 | HD | 海外 | OTT | 漫画 | TV野版 | 小视频 | 网易漫画 | 网易漫画lite | 网易漫画HD | 国际版 |
   */
  appId: number;
  /** 版本号(version_code) */
  build: number;
  /** 设备id */
  buvid: string;
  /** 包类型 */
  mobiApp: string;
  /** 平台：ios/android */
  platform: string;
  /** 运行设备 */
  device?:
    | string
    | undefined;
  /** 渠道 */
  channel: string;
  /** 手机品牌 */
  brand: string;
  /** 手机型号 */
  model: string;
  /** 系统版本 */
  osver: string;
  /** 本地设备指纹 */
  fpLocal: string;
  /** 远程设备指纹 */
  fpRemote: string;
  /** 版本号(version_name) */
  versionName: string;
  /** 设备指纹, 不区分本地或远程设备指纹，作为推送目标的索引. */
  fp: string;
  /** 首次启动时的毫秒时间戳 */
  fts: bigint;
}

function createBaseDevice(): Device {
  return {
    appId: 0,
    build: 0,
    buvid: "",
    mobiApp: "",
    platform: "",
    channel: "",
    brand: "",
    model: "",
    osver: "",
    fpLocal: "",
    fpRemote: "",
    versionName: "",
    fp: "",
    fts: 0n,
  };
}

export const Device: MessageFns<Device> = {
  encode(message: Device, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.appId !== 0) {
      writer.uint32(8).int32(message.appId);
    }
    if (message.build !== 0) {
      writer.uint32(16).int32(message.build);
    }
    if (message.buvid !== "") {
      writer.uint32(26).string(message.buvid);
    }
    if (message.mobiApp !== "") {
      writer.uint32(34).string(message.mobiApp);
    }
    if (message.platform !== "") {
      writer.uint32(42).string(message.platform);
    }
    if (message.device !== undefined) {
      writer.uint32(50).string(message.device);
    }
    if (message.channel !== "") {
      writer.uint32(58).string(message.channel);
    }
    if (message.brand !== "") {
      writer.uint32(66).string(message.brand);
    }
    if (message.model !== "") {
      writer.uint32(74).string(message.model);
    }
    if (message.osver !== "") {
      writer.uint32(82).string(message.osver);
    }
    if (message.fpLocal !== "") {
      writer.uint32(90).string(message.fpLocal);
    }
    if (message.fpRemote !== "") {
      writer.uint32(98).string(message.fpRemote);
    }
    if (message.versionName !== "") {
      writer.uint32(106).string(message.versionName);
    }
    if (message.fp !== "") {
      writer.uint32(114).string(message.fp);
    }
    if (message.fts !== 0n) {
      if (BigInt.asIntN(64, message.fts) !== message.fts) {
        throw new globalThis.Error("value provided for field message.fts of type int64 too large");
      }
      writer.uint32(120).int64(message.fts);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Device {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDevice();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.appId = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.build = reader.int32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.buvid = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.mobiApp = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.platform = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.device = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.channel = reader.string();
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.brand = reader.string();
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.model = reader.string();
          continue;
        case 10:
          if (tag !== 82) {
            break;
          }

          message.osver = reader.string();
          continue;
        case 11:
          if (tag !== 90) {
            break;
          }

          message.fpLocal = reader.string();
          continue;
        case 12:
          if (tag !== 98) {
            break;
          }

          message.fpRemote = reader.string();
          continue;
        case 13:
          if (tag !== 106) {
            break;
          }

          message.versionName = reader.string();
          continue;
        case 14:
          if (tag !== 114) {
            break;
          }

          message.fp = reader.string();
          continue;
        case 15:
          if (tag !== 120) {
            break;
          }

          message.fts = reader.int64() as bigint;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Device {
    return {
      appId: isSet(object.appId) ? globalThis.Number(object.appId) : 0,
      build: isSet(object.build) ? globalThis.Number(object.build) : 0,
      buvid: isSet(object.buvid) ? globalThis.String(object.buvid) : "",
      mobiApp: isSet(object.mobiApp) ? globalThis.String(object.mobiApp) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
      device: isSet(object.device) ? globalThis.String(object.device) : undefined,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      brand: isSet(object.brand) ? globalThis.String(object.brand) : "",
      model: isSet(object.model) ? globalThis.String(object.model) : "",
      osver: isSet(object.osver) ? globalThis.String(object.osver) : "",
      fpLocal: isSet(object.fpLocal) ? globalThis.String(object.fpLocal) : "",
      fpRemote: isSet(object.fpRemote) ? globalThis.String(object.fpRemote) : "",
      versionName: isSet(object.versionName) ? globalThis.String(object.versionName) : "",
      fp: isSet(object.fp) ? globalThis.String(object.fp) : "",
      fts: isSet(object.fts) ? BigInt(object.fts) : 0n,
    };
  },

  toJSON(message: Device): unknown {
    const obj: any = {};
    if (message.appId !== 0) {
      obj.appId = Math.round(message.appId);
    }
    if (message.build !== 0) {
      obj.build = Math.round(message.build);
    }
    if (message.buvid !== "") {
      obj.buvid = message.buvid;
    }
    if (message.mobiApp !== "") {
      obj.mobiApp = message.mobiApp;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    if (message.device !== undefined) {
      obj.device = message.device;
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.brand !== "") {
      obj.brand = message.brand;
    }
    if (message.model !== "") {
      obj.model = message.model;
    }
    if (message.osver !== "") {
      obj.osver = message.osver;
    }
    if (message.fpLocal !== "") {
      obj.fpLocal = message.fpLocal;
    }
    if (message.fpRemote !== "") {
      obj.fpRemote = message.fpRemote;
    }
    if (message.versionName !== "") {
      obj.versionName = message.versionName;
    }
    if (message.fp !== "") {
      obj.fp = message.fp;
    }
    if (message.fts !== 0n) {
      obj.fts = message.fts.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Device>, I>>(base?: I): Device {
    return Device.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Device>, I>>(object: I): Device {
    const message = createBaseDevice();
    message.appId = object.appId ?? 0;
    message.build = object.build ?? 0;
    message.buvid = object.buvid ?? "";
    message.mobiApp = object.mobiApp ?? "";
    message.platform = object.platform ?? "";
    message.device = object.device ?? undefined;
    message.channel = object.channel ?? "";
    message.brand = object.brand ?? "";
    message.model = object.model ?? "";
    message.osver = object.osver ?? "";
    message.fpLocal = object.fpLocal ?? "";
    message.fpRemote = object.fpRemote ?? "";
    message.versionName = object.versionName ?? "";
    message.fp = object.fp ?? "";
    message.fts = object.fts ?? 0n;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
