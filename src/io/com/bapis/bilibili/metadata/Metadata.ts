// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/metadata/Metadata.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.metadata";

export interface Metadata {
  /** 登录鉴权 */
  accessKey: string;
  /** 包类型 */
  mobiApp: string;
  /** 运行设备 */
  device?:
    | string
    | undefined;
  /** 构建号 */
  build: number;
  /** 渠道 */
  channel: string;
  /** 设备buvid */
  buvid: string;
  /** 设备类型 */
  platform: string;
}

function createBaseMetadata(): Metadata {
  return { accessKey: "", mobiApp: "", build: 0, channel: "", buvid: "", platform: "" };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessKey !== "") {
      writer.uint32(10).string(message.accessKey);
    }
    if (message.mobiApp !== "") {
      writer.uint32(18).string(message.mobiApp);
    }
    if (message.device !== undefined) {
      writer.uint32(26).string(message.device);
    }
    if (message.build !== 0) {
      writer.uint32(32).int32(message.build);
    }
    if (message.channel !== "") {
      writer.uint32(42).string(message.channel);
    }
    if (message.buvid !== "") {
      writer.uint32(50).string(message.buvid);
    }
    if (message.platform !== "") {
      writer.uint32(58).string(message.platform);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.mobiApp = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.device = reader.string();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.build = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.channel = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.buvid = reader.string();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.platform = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      accessKey: isSet(object.accessKey) ? globalThis.String(object.accessKey) : "",
      mobiApp: isSet(object.mobiApp) ? globalThis.String(object.mobiApp) : "",
      device: isSet(object.device) ? globalThis.String(object.device) : undefined,
      build: isSet(object.build) ? globalThis.Number(object.build) : 0,
      channel: isSet(object.channel) ? globalThis.String(object.channel) : "",
      buvid: isSet(object.buvid) ? globalThis.String(object.buvid) : "",
      platform: isSet(object.platform) ? globalThis.String(object.platform) : "",
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.mobiApp !== "") {
      obj.mobiApp = message.mobiApp;
    }
    if (message.device !== undefined) {
      obj.device = message.device;
    }
    if (message.build !== 0) {
      obj.build = Math.round(message.build);
    }
    if (message.channel !== "") {
      obj.channel = message.channel;
    }
    if (message.buvid !== "") {
      obj.buvid = message.buvid;
    }
    if (message.platform !== "") {
      obj.platform = message.platform;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.accessKey = object.accessKey ?? "";
    message.mobiApp = object.mobiApp ?? "";
    message.device = object.device ?? undefined;
    message.build = object.build ?? 0;
    message.channel = object.channel ?? "";
    message.buvid = object.buvid ?? "";
    message.platform = object.platform ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
