// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/metadata/Network.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.metadata.network";

/** 网络类型 */
export enum NetworkType {
  /** NT_UNKNOWN - 未知 */
  NT_UNKNOWN = 0,
  /** WIFI - WIFI */
  WIFI = 1,
  /** CELLULAR - 移动网络 */
  CELLULAR = 2,
  /** OFFLINE - 未连接 */
  OFFLINE = 3,
  /** OTHERNET - 其他网络 */
  OTHERNET = 4,
  /** ETHERNET - 以太网 */
  ETHERNET = 5,
  UNRECOGNIZED = -1,
}

export function networkTypeFromJSON(object: any): NetworkType {
  switch (object) {
    case 0:
    case "NT_UNKNOWN":
      return NetworkType.NT_UNKNOWN;
    case 1:
    case "WIFI":
      return NetworkType.WIFI;
    case 2:
    case "CELLULAR":
      return NetworkType.CELLULAR;
    case 3:
    case "OFFLINE":
      return NetworkType.OFFLINE;
    case 4:
    case "OTHERNET":
      return NetworkType.OTHERNET;
    case 5:
    case "ETHERNET":
      return NetworkType.ETHERNET;
    case -1:
    case "UNRECOGNIZED":
    default:
      return NetworkType.UNRECOGNIZED;
  }
}

export function networkTypeToJSON(object: NetworkType): string {
  switch (object) {
    case NetworkType.NT_UNKNOWN:
      return "NT_UNKNOWN";
    case NetworkType.WIFI:
      return "WIFI";
    case NetworkType.CELLULAR:
      return "CELLULAR";
    case NetworkType.OFFLINE:
      return "OFFLINE";
    case NetworkType.OTHERNET:
      return "OTHERNET";
    case NetworkType.ETHERNET:
      return "ETHERNET";
    case NetworkType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** 免流类型 */
export enum TFType {
  /** TF_UNKNOWN - 正常计费 */
  TF_UNKNOWN = 0,
  /** U_CARD - 联通卡 */
  U_CARD = 1,
  /** U_PKG - 联通包 */
  U_PKG = 2,
  /** C_CARD - 移动卡 */
  C_CARD = 3,
  /** C_PKG - 移动包 */
  C_PKG = 4,
  /** T_CARD - 电信卡 */
  T_CARD = 5,
  /** T_PKG - 电信包 */
  T_PKG = 6,
  UNRECOGNIZED = -1,
}

export function tFTypeFromJSON(object: any): TFType {
  switch (object) {
    case 0:
    case "TF_UNKNOWN":
      return TFType.TF_UNKNOWN;
    case 1:
    case "U_CARD":
      return TFType.U_CARD;
    case 2:
    case "U_PKG":
      return TFType.U_PKG;
    case 3:
    case "C_CARD":
      return TFType.C_CARD;
    case 4:
    case "C_PKG":
      return TFType.C_PKG;
    case 5:
    case "T_CARD":
      return TFType.T_CARD;
    case 6:
    case "T_PKG":
      return TFType.T_PKG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TFType.UNRECOGNIZED;
  }
}

export function tFTypeToJSON(object: TFType): string {
  switch (object) {
    case TFType.TF_UNKNOWN:
      return "TF_UNKNOWN";
    case TFType.U_CARD:
      return "U_CARD";
    case TFType.U_PKG:
      return "U_PKG";
    case TFType.C_CARD:
      return "C_CARD";
    case TFType.C_PKG:
      return "C_PKG";
    case TFType.T_CARD:
      return "T_CARD";
    case TFType.T_PKG:
      return "T_PKG";
    case TFType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Network {
  /** 网络类型 */
  type: NetworkType;
  /** 免流类型 */
  tf?:
    | TFType
    | undefined;
  /** 运营商 */
  oid?: string | undefined;
}

function createBaseNetwork(): Network {
  return { type: 0 };
}

export const Network: MessageFns<Network> = {
  encode(message: Network, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.tf !== undefined) {
      writer.uint32(16).int32(message.tf);
    }
    if (message.oid !== undefined) {
      writer.uint32(26).string(message.oid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Network {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseNetwork();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.tf = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.oid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Network {
    return {
      type: isSet(object.type) ? networkTypeFromJSON(object.type) : 0,
      tf: isSet(object.tf) ? tFTypeFromJSON(object.tf) : undefined,
      oid: isSet(object.oid) ? globalThis.String(object.oid) : undefined,
    };
  },

  toJSON(message: Network): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = networkTypeToJSON(message.type);
    }
    if (message.tf !== undefined) {
      obj.tf = tFTypeToJSON(message.tf);
    }
    if (message.oid !== undefined) {
      obj.oid = message.oid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Network>, I>>(base?: I): Network {
    return Network.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Network>, I>>(object: I): Network {
    const message = createBaseNetwork();
    message.type = object.type ?? 0;
    message.tf = object.tf ?? undefined;
    message.oid = object.oid ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
