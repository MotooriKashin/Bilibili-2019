// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/metadata/Locale.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.metadata.locale";

/** 设备区域信息 */
export interface Locale {
  /** App设置的locale. */
  cLocale:
    | LocaleIds
    | undefined;
  /** 系统默认的locale. */
  sLocale:
    | LocaleIds
    | undefined;
  /** sim卡的国家码+运营商码 */
  simCode?:
    | string
    | undefined;
  /** 时区 */
  timezone?: string | undefined;
}

/** Defined by https://developer.apple.com/library/archive/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html */
export interface LocaleIds {
  /** A language designator is a code that represents a language. */
  language: string;
  /** Writing systems. */
  script?:
    | string
    | undefined;
  /** A region designator is a code that represents a country or an area. */
  region: string;
}

function createBaseLocale(): Locale {
  return { cLocale: undefined, sLocale: undefined };
}

export const Locale: MessageFns<Locale> = {
  encode(message: Locale, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.cLocale !== undefined) {
      LocaleIds.encode(message.cLocale, writer.uint32(10).fork()).join();
    }
    if (message.sLocale !== undefined) {
      LocaleIds.encode(message.sLocale, writer.uint32(18).fork()).join();
    }
    if (message.simCode !== undefined) {
      writer.uint32(26).string(message.simCode);
    }
    if (message.timezone !== undefined) {
      writer.uint32(34).string(message.timezone);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Locale {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocale();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.cLocale = LocaleIds.decode(reader, reader.uint32());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.sLocale = LocaleIds.decode(reader, reader.uint32());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.simCode = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.timezone = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Locale {
    return {
      cLocale: isSet(object.cLocale) ? LocaleIds.fromJSON(object.cLocale) : undefined,
      sLocale: isSet(object.sLocale) ? LocaleIds.fromJSON(object.sLocale) : undefined,
      simCode: isSet(object.simCode) ? globalThis.String(object.simCode) : undefined,
      timezone: isSet(object.timezone) ? globalThis.String(object.timezone) : undefined,
    };
  },

  toJSON(message: Locale): unknown {
    const obj: any = {};
    if (message.cLocale !== undefined) {
      obj.cLocale = LocaleIds.toJSON(message.cLocale);
    }
    if (message.sLocale !== undefined) {
      obj.sLocale = LocaleIds.toJSON(message.sLocale);
    }
    if (message.simCode !== undefined) {
      obj.simCode = message.simCode;
    }
    if (message.timezone !== undefined) {
      obj.timezone = message.timezone;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Locale>, I>>(base?: I): Locale {
    return Locale.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Locale>, I>>(object: I): Locale {
    const message = createBaseLocale();
    message.cLocale = (object.cLocale !== undefined && object.cLocale !== null)
      ? LocaleIds.fromPartial(object.cLocale)
      : undefined;
    message.sLocale = (object.sLocale !== undefined && object.sLocale !== null)
      ? LocaleIds.fromPartial(object.sLocale)
      : undefined;
    message.simCode = object.simCode ?? undefined;
    message.timezone = object.timezone ?? undefined;
    return message;
  },
};

function createBaseLocaleIds(): LocaleIds {
  return { language: "", region: "" };
}

export const LocaleIds: MessageFns<LocaleIds> = {
  encode(message: LocaleIds, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.language !== "") {
      writer.uint32(10).string(message.language);
    }
    if (message.script !== undefined) {
      writer.uint32(18).string(message.script);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): LocaleIds {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLocaleIds();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.language = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.script = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): LocaleIds {
    return {
      language: isSet(object.language) ? globalThis.String(object.language) : "",
      script: isSet(object.script) ? globalThis.String(object.script) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
    };
  },

  toJSON(message: LocaleIds): unknown {
    const obj: any = {};
    if (message.language !== "") {
      obj.language = message.language;
    }
    if (message.script !== undefined) {
      obj.script = message.script;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<LocaleIds>, I>>(base?: I): LocaleIds {
    return LocaleIds.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<LocaleIds>, I>>(object: I): LocaleIds {
    const message = createBaseLocaleIds();
    message.language = object.language ?? "";
    message.script = object.script ?? undefined;
    message.region = object.region ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
