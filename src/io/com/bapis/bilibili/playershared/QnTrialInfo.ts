// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/playershared/QnTrialInfo.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Button, Toast } from "./Toast";

export const protobufPackage = "bilibili.playershared";

/** 播放页信息-响应: 高画质试看信息 */
export interface QnTrialInfo {
  /** 能否试看高画质 */
  trialAble: boolean;
  remainingTimes: number;
  start: number;
  timeLength: number;
  startToast: Toast | undefined;
  endToast: Toast | undefined;
  qualityOpenTipBtn: Button | undefined;
}

function createBaseQnTrialInfo(): QnTrialInfo {
  return {
    trialAble: false,
    remainingTimes: 0,
    start: 0,
    timeLength: 0,
    startToast: undefined,
    endToast: undefined,
    qualityOpenTipBtn: undefined,
  };
}

export const QnTrialInfo: MessageFns<QnTrialInfo> = {
  encode(message: QnTrialInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.trialAble !== false) {
      writer.uint32(8).bool(message.trialAble);
    }
    if (message.remainingTimes !== 0) {
      writer.uint32(16).int32(message.remainingTimes);
    }
    if (message.start !== 0) {
      writer.uint32(24).int32(message.start);
    }
    if (message.timeLength !== 0) {
      writer.uint32(32).int32(message.timeLength);
    }
    if (message.startToast !== undefined) {
      Toast.encode(message.startToast, writer.uint32(42).fork()).join();
    }
    if (message.endToast !== undefined) {
      Toast.encode(message.endToast, writer.uint32(50).fork()).join();
    }
    if (message.qualityOpenTipBtn !== undefined) {
      Button.encode(message.qualityOpenTipBtn, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QnTrialInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQnTrialInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.trialAble = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.remainingTimes = reader.int32();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.start = reader.int32();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.timeLength = reader.int32();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.startToast = Toast.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.endToast = Toast.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.qualityOpenTipBtn = Button.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QnTrialInfo {
    return {
      trialAble: isSet(object.trialAble) ? globalThis.Boolean(object.trialAble) : false,
      remainingTimes: isSet(object.remainingTimes) ? globalThis.Number(object.remainingTimes) : 0,
      start: isSet(object.start) ? globalThis.Number(object.start) : 0,
      timeLength: isSet(object.timeLength) ? globalThis.Number(object.timeLength) : 0,
      startToast: isSet(object.startToast) ? Toast.fromJSON(object.startToast) : undefined,
      endToast: isSet(object.endToast) ? Toast.fromJSON(object.endToast) : undefined,
      qualityOpenTipBtn: isSet(object.qualityOpenTipBtn) ? Button.fromJSON(object.qualityOpenTipBtn) : undefined,
    };
  },

  toJSON(message: QnTrialInfo): unknown {
    const obj: any = {};
    if (message.trialAble !== false) {
      obj.trialAble = message.trialAble;
    }
    if (message.remainingTimes !== 0) {
      obj.remainingTimes = Math.round(message.remainingTimes);
    }
    if (message.start !== 0) {
      obj.start = Math.round(message.start);
    }
    if (message.timeLength !== 0) {
      obj.timeLength = Math.round(message.timeLength);
    }
    if (message.startToast !== undefined) {
      obj.startToast = Toast.toJSON(message.startToast);
    }
    if (message.endToast !== undefined) {
      obj.endToast = Toast.toJSON(message.endToast);
    }
    if (message.qualityOpenTipBtn !== undefined) {
      obj.qualityOpenTipBtn = Button.toJSON(message.qualityOpenTipBtn);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QnTrialInfo>, I>>(base?: I): QnTrialInfo {
    return QnTrialInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QnTrialInfo>, I>>(object: I): QnTrialInfo {
    const message = createBaseQnTrialInfo();
    message.trialAble = object.trialAble ?? false;
    message.remainingTimes = object.remainingTimes ?? 0;
    message.start = object.start ?? 0;
    message.timeLength = object.timeLength ?? 0;
    message.startToast = (object.startToast !== undefined && object.startToast !== null)
      ? Toast.fromPartial(object.startToast)
      : undefined;
    message.endToast = (object.endToast !== undefined && object.endToast !== null)
      ? Toast.fromPartial(object.endToast)
      : undefined;
    message.qualityOpenTipBtn = (object.qualityOpenTipBtn !== undefined && object.qualityOpenTipBtn !== null)
      ? Button.fromPartial(object.qualityOpenTipBtn)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
