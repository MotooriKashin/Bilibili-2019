// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/playershared/PlayDeviceConf.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.playershared";

export interface PlayDeviceConf {
  deviceConfs: { [key: number]: DeviceConf };
}

export interface PlayDeviceConf_DeviceConfsEntry {
  key: number;
  value: DeviceConf | undefined;
}

export interface DeviceConf {
  confValue: ConfValue | undefined;
}

export interface ConfValue {
  switchVal?: number | undefined;
  selectedVal?: number | undefined;
}

function createBasePlayDeviceConf(): PlayDeviceConf {
  return { deviceConfs: {} };
}

export const PlayDeviceConf: MessageFns<PlayDeviceConf> = {
  encode(message: PlayDeviceConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.deviceConfs).forEach(([key, value]) => {
      PlayDeviceConf_DeviceConfsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayDeviceConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayDeviceConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = PlayDeviceConf_DeviceConfsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.deviceConfs[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayDeviceConf {
    return {
      deviceConfs: isObject(object.deviceConfs)
        ? Object.entries(object.deviceConfs).reduce<{ [key: number]: DeviceConf }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = DeviceConf.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PlayDeviceConf): unknown {
    const obj: any = {};
    if (message.deviceConfs) {
      const entries = Object.entries(message.deviceConfs);
      if (entries.length > 0) {
        obj.deviceConfs = {};
        entries.forEach(([k, v]) => {
          obj.deviceConfs[k] = DeviceConf.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayDeviceConf>, I>>(base?: I): PlayDeviceConf {
    return PlayDeviceConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayDeviceConf>, I>>(object: I): PlayDeviceConf {
    const message = createBasePlayDeviceConf();
    message.deviceConfs = Object.entries(object.deviceConfs ?? {}).reduce<{ [key: number]: DeviceConf }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = DeviceConf.fromPartial(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBasePlayDeviceConf_DeviceConfsEntry(): PlayDeviceConf_DeviceConfsEntry {
  return { key: 0, value: undefined };
}

export const PlayDeviceConf_DeviceConfsEntry: MessageFns<PlayDeviceConf_DeviceConfsEntry> = {
  encode(message: PlayDeviceConf_DeviceConfsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      DeviceConf.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayDeviceConf_DeviceConfsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayDeviceConf_DeviceConfsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = DeviceConf.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayDeviceConf_DeviceConfsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? DeviceConf.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PlayDeviceConf_DeviceConfsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = DeviceConf.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayDeviceConf_DeviceConfsEntry>, I>>(base?: I): PlayDeviceConf_DeviceConfsEntry {
    return PlayDeviceConf_DeviceConfsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayDeviceConf_DeviceConfsEntry>, I>>(
    object: I,
  ): PlayDeviceConf_DeviceConfsEntry {
    const message = createBasePlayDeviceConf_DeviceConfsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? DeviceConf.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseDeviceConf(): DeviceConf {
  return { confValue: undefined };
}

export const DeviceConf: MessageFns<DeviceConf> = {
  encode(message: DeviceConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.confValue !== undefined) {
      ConfValue.encode(message.confValue, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeviceConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeviceConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.confValue = ConfValue.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeviceConf {
    return { confValue: isSet(object.confValue) ? ConfValue.fromJSON(object.confValue) : undefined };
  },

  toJSON(message: DeviceConf): unknown {
    const obj: any = {};
    if (message.confValue !== undefined) {
      obj.confValue = ConfValue.toJSON(message.confValue);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeviceConf>, I>>(base?: I): DeviceConf {
    return DeviceConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeviceConf>, I>>(object: I): DeviceConf {
    const message = createBaseDeviceConf();
    message.confValue = (object.confValue !== undefined && object.confValue !== null)
      ? ConfValue.fromPartial(object.confValue)
      : undefined;
    return message;
  },
};

function createBaseConfValue(): ConfValue {
  return {};
}

export const ConfValue: MessageFns<ConfValue> = {
  encode(message: ConfValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.switchVal !== undefined) {
      writer.uint32(8).int32(message.switchVal);
    }
    if (message.selectedVal !== undefined) {
      writer.uint32(16).int32(message.selectedVal);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ConfValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConfValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.switchVal = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.selectedVal = reader.int32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ConfValue {
    return {
      switchVal: isSet(object.switchVal) ? globalThis.Number(object.switchVal) : undefined,
      selectedVal: isSet(object.selectedVal) ? globalThis.Number(object.selectedVal) : undefined,
    };
  },

  toJSON(message: ConfValue): unknown {
    const obj: any = {};
    if (message.switchVal !== undefined) {
      obj.switchVal = Math.round(message.switchVal);
    }
    if (message.selectedVal !== undefined) {
      obj.selectedVal = Math.round(message.selectedVal);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ConfValue>, I>>(base?: I): ConfValue {
    return ConfValue.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ConfValue>, I>>(object: I): ConfValue {
    const message = createBaseConfValue();
    message.switchVal = object.switchVal ?? undefined;
    message.selectedVal = object.selectedVal ?? undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
