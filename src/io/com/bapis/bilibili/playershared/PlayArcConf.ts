// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/playershared/PlayArcConf.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.playershared";

/** 播放页信息-响应: PlayArcConf */
export interface PlayArcConf {
  arcConfs: { [key: number]: ArcConf };
}

export interface PlayArcConf_ArcConfsEntry {
  key: number;
  value: ArcConf | undefined;
}

/** ArcConf消息 */
export interface ArcConf {
  /** 是否支持 */
  isSupport: boolean;
  /** 是否禁用 */
  disabled: boolean;
  /** 额外内容 */
  extraContent?:
    | ExtraContent
    | undefined;
  /** 不支持场景列表 */
  unsupportScene: number[];
}

/** ? 错误码补充信息 */
export interface ExtraContent {
  disableReason: string;
  disableCode: bigint;
}

function createBasePlayArcConf(): PlayArcConf {
  return { arcConfs: {} };
}

export const PlayArcConf: MessageFns<PlayArcConf> = {
  encode(message: PlayArcConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.arcConfs).forEach(([key, value]) => {
      PlayArcConf_ArcConfsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayArcConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayArcConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          const entry1 = PlayArcConf_ArcConfsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.arcConfs[entry1.key] = entry1.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayArcConf {
    return {
      arcConfs: isObject(object.arcConfs)
        ? Object.entries(object.arcConfs).reduce<{ [key: number]: ArcConf }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = ArcConf.fromJSON(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: PlayArcConf): unknown {
    const obj: any = {};
    if (message.arcConfs) {
      const entries = Object.entries(message.arcConfs);
      if (entries.length > 0) {
        obj.arcConfs = {};
        entries.forEach(([k, v]) => {
          obj.arcConfs[k] = ArcConf.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayArcConf>, I>>(base?: I): PlayArcConf {
    return PlayArcConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayArcConf>, I>>(object: I): PlayArcConf {
    const message = createBasePlayArcConf();
    message.arcConfs = Object.entries(object.arcConfs ?? {}).reduce<{ [key: number]: ArcConf }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[globalThis.Number(key)] = ArcConf.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBasePlayArcConf_ArcConfsEntry(): PlayArcConf_ArcConfsEntry {
  return { key: 0, value: undefined };
}

export const PlayArcConf_ArcConfsEntry: MessageFns<PlayArcConf_ArcConfsEntry> = {
  encode(message: PlayArcConf_ArcConfsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== undefined) {
      ArcConf.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayArcConf_ArcConfsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayArcConf_ArcConfsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = ArcConf.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayArcConf_ArcConfsEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? ArcConf.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: PlayArcConf_ArcConfsEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== undefined) {
      obj.value = ArcConf.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayArcConf_ArcConfsEntry>, I>>(base?: I): PlayArcConf_ArcConfsEntry {
    return PlayArcConf_ArcConfsEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayArcConf_ArcConfsEntry>, I>>(object: I): PlayArcConf_ArcConfsEntry {
    const message = createBasePlayArcConf_ArcConfsEntry();
    message.key = object.key ?? 0;
    message.value = (object.value !== undefined && object.value !== null)
      ? ArcConf.fromPartial(object.value)
      : undefined;
    return message;
  },
};

function createBaseArcConf(): ArcConf {
  return { isSupport: false, disabled: false, unsupportScene: [] };
}

export const ArcConf: MessageFns<ArcConf> = {
  encode(message: ArcConf, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.isSupport !== false) {
      writer.uint32(8).bool(message.isSupport);
    }
    if (message.disabled !== false) {
      writer.uint32(16).bool(message.disabled);
    }
    if (message.extraContent !== undefined) {
      ExtraContent.encode(message.extraContent, writer.uint32(26).fork()).join();
    }
    writer.uint32(34).fork();
    for (const v of message.unsupportScene) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ArcConf {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseArcConf();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.isSupport = reader.bool();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.disabled = reader.bool();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.extraContent = ExtraContent.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag === 32) {
            message.unsupportScene.push(reader.int32());

            continue;
          }

          if (tag === 34) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.unsupportScene.push(reader.int32());
            }

            continue;
          }

          break;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ArcConf {
    return {
      isSupport: isSet(object.isSupport) ? globalThis.Boolean(object.isSupport) : false,
      disabled: isSet(object.disabled) ? globalThis.Boolean(object.disabled) : false,
      extraContent: isSet(object.extraContent) ? ExtraContent.fromJSON(object.extraContent) : undefined,
      unsupportScene: globalThis.Array.isArray(object?.unsupportScene)
        ? object.unsupportScene.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: ArcConf): unknown {
    const obj: any = {};
    if (message.isSupport !== false) {
      obj.isSupport = message.isSupport;
    }
    if (message.disabled !== false) {
      obj.disabled = message.disabled;
    }
    if (message.extraContent !== undefined) {
      obj.extraContent = ExtraContent.toJSON(message.extraContent);
    }
    if (message.unsupportScene?.length) {
      obj.unsupportScene = message.unsupportScene.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ArcConf>, I>>(base?: I): ArcConf {
    return ArcConf.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ArcConf>, I>>(object: I): ArcConf {
    const message = createBaseArcConf();
    message.isSupport = object.isSupport ?? false;
    message.disabled = object.disabled ?? false;
    message.extraContent = (object.extraContent !== undefined && object.extraContent !== null)
      ? ExtraContent.fromPartial(object.extraContent)
      : undefined;
    message.unsupportScene = object.unsupportScene?.map((e) => e) || [];
    return message;
  },
};

function createBaseExtraContent(): ExtraContent {
  return { disableReason: "", disableCode: 0n };
}

export const ExtraContent: MessageFns<ExtraContent> = {
  encode(message: ExtraContent, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.disableReason !== "") {
      writer.uint32(10).string(message.disableReason);
    }
    if (message.disableCode !== 0n) {
      if (BigInt.asIntN(64, message.disableCode) !== message.disableCode) {
        throw new globalThis.Error("value provided for field message.disableCode of type int64 too large");
      }
      writer.uint32(16).int64(message.disableCode);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ExtraContent {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseExtraContent();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.disableReason = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.disableCode = reader.int64() as bigint;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ExtraContent {
    return {
      disableReason: isSet(object.disableReason) ? globalThis.String(object.disableReason) : "",
      disableCode: isSet(object.disableCode) ? BigInt(object.disableCode) : 0n,
    };
  },

  toJSON(message: ExtraContent): unknown {
    const obj: any = {};
    if (message.disableReason !== "") {
      obj.disableReason = message.disableReason;
    }
    if (message.disableCode !== 0n) {
      obj.disableCode = message.disableCode.toString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ExtraContent>, I>>(base?: I): ExtraContent {
    return ExtraContent.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ExtraContent>, I>>(object: I): ExtraContent {
    const message = createBaseExtraContent();
    message.disableReason = object.disableReason ?? "";
    message.disableCode = object.disableCode ?? 0n;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
