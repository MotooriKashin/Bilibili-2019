// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/playershared/Fragment.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Any } from "../../google/protobuf/any";

export const protobufPackage = "bilibili.playershared";

export enum FragmentPosition {
  INVALID = 0,
  PRE = 1,
  MIDDLE = 2,
  POST = 3,
  UNRECOGNIZED = -1,
}

export function fragmentPositionFromJSON(object: any): FragmentPosition {
  switch (object) {
    case 0:
    case "INVALID":
      return FragmentPosition.INVALID;
    case 1:
    case "PRE":
      return FragmentPosition.PRE;
    case 2:
    case "MIDDLE":
      return FragmentPosition.MIDDLE;
    case 3:
    case "POST":
      return FragmentPosition.POST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FragmentPosition.UNRECOGNIZED;
  }
}

export function fragmentPositionToJSON(object: FragmentPosition): string {
  switch (object) {
    case FragmentPosition.INVALID:
      return "INVALID";
    case FragmentPosition.PRE:
      return "PRE";
    case FragmentPosition.MIDDLE:
      return "MIDDLE";
    case FragmentPosition.POST:
      return "POST";
    case FragmentPosition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum FragmentType {
  UNKNOWN = 0,
  AD_FRAGMENT = 1,
  OGV_FRAGMENT = 2,
  UNRECOGNIZED = -1,
}

export function fragmentTypeFromJSON(object: any): FragmentType {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return FragmentType.UNKNOWN;
    case 1:
    case "AD_FRAGMENT":
      return FragmentType.AD_FRAGMENT;
    case 2:
    case "OGV_FRAGMENT":
      return FragmentType.OGV_FRAGMENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return FragmentType.UNRECOGNIZED;
  }
}

export function fragmentTypeToJSON(object: FragmentType): string {
  switch (object) {
    case FragmentType.UNKNOWN:
      return "UNKNOWN";
    case FragmentType.AD_FRAGMENT:
      return "AD_FRAGMENT";
    case FragmentType.OGV_FRAGMENT:
      return "OGV_FRAGMENT";
    case FragmentType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Fragment {
  infos: FragmentInfo[];
}

export interface FragmentInfo {
  index: number;
  fragmentPosition: FragmentPosition;
  fragmentType: FragmentType;
  aid: bigint;
  cid: bigint;
  startTime: bigint;
  report: Any | undefined;
}

function createBaseFragment(): Fragment {
  return { infos: [] };
}

export const Fragment: MessageFns<Fragment> = {
  encode(message: Fragment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.infos) {
      FragmentInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Fragment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFragment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.infos.push(FragmentInfo.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Fragment {
    return {
      infos: globalThis.Array.isArray(object?.infos) ? object.infos.map((e: any) => FragmentInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: Fragment): unknown {
    const obj: any = {};
    if (message.infos?.length) {
      obj.infos = message.infos.map((e) => FragmentInfo.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Fragment>, I>>(base?: I): Fragment {
    return Fragment.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Fragment>, I>>(object: I): Fragment {
    const message = createBaseFragment();
    message.infos = object.infos?.map((e) => FragmentInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseFragmentInfo(): FragmentInfo {
  return { index: 0, fragmentPosition: 0, fragmentType: 0, aid: 0n, cid: 0n, startTime: 0n, report: undefined };
}

export const FragmentInfo: MessageFns<FragmentInfo> = {
  encode(message: FragmentInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.index !== 0) {
      writer.uint32(8).int32(message.index);
    }
    if (message.fragmentPosition !== 0) {
      writer.uint32(16).int32(message.fragmentPosition);
    }
    if (message.fragmentType !== 0) {
      writer.uint32(24).int32(message.fragmentType);
    }
    if (message.aid !== 0n) {
      if (BigInt.asIntN(64, message.aid) !== message.aid) {
        throw new globalThis.Error("value provided for field message.aid of type int64 too large");
      }
      writer.uint32(32).int64(message.aid);
    }
    if (message.cid !== 0n) {
      if (BigInt.asIntN(64, message.cid) !== message.cid) {
        throw new globalThis.Error("value provided for field message.cid of type int64 too large");
      }
      writer.uint32(40).int64(message.cid);
    }
    if (message.startTime !== 0n) {
      if (BigInt.asIntN(64, message.startTime) !== message.startTime) {
        throw new globalThis.Error("value provided for field message.startTime of type int64 too large");
      }
      writer.uint32(48).int64(message.startTime);
    }
    if (message.report !== undefined) {
      Any.encode(message.report, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FragmentInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFragmentInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.index = reader.int32();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.fragmentPosition = reader.int32() as any;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.fragmentType = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.aid = reader.int64() as bigint;
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.cid = reader.int64() as bigint;
          continue;
        case 6:
          if (tag !== 48) {
            break;
          }

          message.startTime = reader.int64() as bigint;
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.report = Any.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FragmentInfo {
    return {
      index: isSet(object.index) ? globalThis.Number(object.index) : 0,
      fragmentPosition: isSet(object.fragmentPosition) ? fragmentPositionFromJSON(object.fragmentPosition) : 0,
      fragmentType: isSet(object.fragmentType) ? fragmentTypeFromJSON(object.fragmentType) : 0,
      aid: isSet(object.aid) ? BigInt(object.aid) : 0n,
      cid: isSet(object.cid) ? BigInt(object.cid) : 0n,
      startTime: isSet(object.startTime) ? BigInt(object.startTime) : 0n,
      report: isSet(object.report) ? Any.fromJSON(object.report) : undefined,
    };
  },

  toJSON(message: FragmentInfo): unknown {
    const obj: any = {};
    if (message.index !== 0) {
      obj.index = Math.round(message.index);
    }
    if (message.fragmentPosition !== 0) {
      obj.fragmentPosition = fragmentPositionToJSON(message.fragmentPosition);
    }
    if (message.fragmentType !== 0) {
      obj.fragmentType = fragmentTypeToJSON(message.fragmentType);
    }
    if (message.aid !== 0n) {
      obj.aid = message.aid.toString();
    }
    if (message.cid !== 0n) {
      obj.cid = message.cid.toString();
    }
    if (message.startTime !== 0n) {
      obj.startTime = message.startTime.toString();
    }
    if (message.report !== undefined) {
      obj.report = Any.toJSON(message.report);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<FragmentInfo>, I>>(base?: I): FragmentInfo {
    return FragmentInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<FragmentInfo>, I>>(object: I): FragmentInfo {
    const message = createBaseFragmentInfo();
    message.index = object.index ?? 0;
    message.fragmentPosition = object.fragmentPosition ?? 0;
    message.fragmentType = object.fragmentType ?? 0;
    message.aid = object.aid ?? 0n;
    message.cid = object.cid ?? 0n;
    message.startTime = object.startTime ?? 0n;
    message.report = (object.report !== undefined && object.report !== null)
      ? Any.fromPartial(object.report)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
