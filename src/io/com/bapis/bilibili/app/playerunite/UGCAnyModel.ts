// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/app/playerunite/UGCAnyModel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.app.playerunite.ugcanymodel";

/** 播放限制 */
export enum PlayLimitCode {
  PLC_UNKNOWN = 0,
  /** PLC_NOTPAYED - 未付费 */
  PLC_NOTPAYED = 1,
  PLC_ChargingPlusNotPass = 2,
  PLC_ChargingPlusUpgrade = 3,
  PLC_ChargingPlusReject = 4,
  UNRECOGNIZED = -1,
}

export function playLimitCodeFromJSON(object: any): PlayLimitCode {
  switch (object) {
    case 0:
    case "PLC_UNKNOWN":
      return PlayLimitCode.PLC_UNKNOWN;
    case 1:
    case "PLC_NOTPAYED":
      return PlayLimitCode.PLC_NOTPAYED;
    case 2:
    case "PLC_ChargingPlusNotPass":
      return PlayLimitCode.PLC_ChargingPlusNotPass;
    case 3:
    case "PLC_ChargingPlusUpgrade":
      return PlayLimitCode.PLC_ChargingPlusUpgrade;
    case 4:
    case "PLC_ChargingPlusReject":
      return PlayLimitCode.PLC_ChargingPlusReject;
    case -1:
    case "UNRECOGNIZED":
    default:
      return PlayLimitCode.UNRECOGNIZED;
  }
}

export function playLimitCodeToJSON(object: PlayLimitCode): string {
  switch (object) {
    case PlayLimitCode.PLC_UNKNOWN:
      return "PLC_UNKNOWN";
    case PlayLimitCode.PLC_NOTPAYED:
      return "PLC_NOTPAYED";
    case PlayLimitCode.PLC_ChargingPlusNotPass:
      return "PLC_ChargingPlusNotPass";
    case PlayLimitCode.PLC_ChargingPlusUpgrade:
      return "PLC_ChargingPlusUpgrade";
    case PlayLimitCode.PLC_ChargingPlusReject:
      return "PLC_ChargingPlusReject";
    case PlayLimitCode.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UGCAnyModel {
  playLimit: PlayLimit | undefined;
}

export interface PlayLimit {
  code: PlayLimitCode;
  message: string;
  subMessage: string;
  button: ButtonStyle | undefined;
}

export interface ButtonStyle {
  text: string;
  textColor: string;
  bgColor: string;
  jumpLink: string;
}

function createBaseUGCAnyModel(): UGCAnyModel {
  return { playLimit: undefined };
}

export const UGCAnyModel: MessageFns<UGCAnyModel> = {
  encode(message: UGCAnyModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playLimit !== undefined) {
      PlayLimit.encode(message.playLimit, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UGCAnyModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUGCAnyModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.playLimit = PlayLimit.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UGCAnyModel {
    return { playLimit: isSet(object.playLimit) ? PlayLimit.fromJSON(object.playLimit) : undefined };
  },

  toJSON(message: UGCAnyModel): unknown {
    const obj: any = {};
    if (message.playLimit !== undefined) {
      obj.playLimit = PlayLimit.toJSON(message.playLimit);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UGCAnyModel>, I>>(base?: I): UGCAnyModel {
    return UGCAnyModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UGCAnyModel>, I>>(object: I): UGCAnyModel {
    const message = createBaseUGCAnyModel();
    message.playLimit = (object.playLimit !== undefined && object.playLimit !== null)
      ? PlayLimit.fromPartial(object.playLimit)
      : undefined;
    return message;
  },
};

function createBasePlayLimit(): PlayLimit {
  return { code: 0, message: "", subMessage: "", button: undefined };
}

export const PlayLimit: MessageFns<PlayLimit> = {
  encode(message: PlayLimit, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).int32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.subMessage !== "") {
      writer.uint32(26).string(message.subMessage);
    }
    if (message.button !== undefined) {
      ButtonStyle.encode(message.button, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayLimit {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayLimit();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.code = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.subMessage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.button = ButtonStyle.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayLimit {
    return {
      code: isSet(object.code) ? playLimitCodeFromJSON(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      subMessage: isSet(object.subMessage) ? globalThis.String(object.subMessage) : "",
      button: isSet(object.button) ? ButtonStyle.fromJSON(object.button) : undefined,
    };
  },

  toJSON(message: PlayLimit): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = playLimitCodeToJSON(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.subMessage !== "") {
      obj.subMessage = message.subMessage;
    }
    if (message.button !== undefined) {
      obj.button = ButtonStyle.toJSON(message.button);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayLimit>, I>>(base?: I): PlayLimit {
    return PlayLimit.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayLimit>, I>>(object: I): PlayLimit {
    const message = createBasePlayLimit();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.subMessage = object.subMessage ?? "";
    message.button = (object.button !== undefined && object.button !== null)
      ? ButtonStyle.fromPartial(object.button)
      : undefined;
    return message;
  },
};

function createBaseButtonStyle(): ButtonStyle {
  return { text: "", textColor: "", bgColor: "", jumpLink: "" };
}

export const ButtonStyle: MessageFns<ButtonStyle> = {
  encode(message: ButtonStyle, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.text !== "") {
      writer.uint32(10).string(message.text);
    }
    if (message.textColor !== "") {
      writer.uint32(18).string(message.textColor);
    }
    if (message.bgColor !== "") {
      writer.uint32(26).string(message.bgColor);
    }
    if (message.jumpLink !== "") {
      writer.uint32(34).string(message.jumpLink);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ButtonStyle {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseButtonStyle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.text = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.textColor = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bgColor = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.jumpLink = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ButtonStyle {
    return {
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      textColor: isSet(object.textColor) ? globalThis.String(object.textColor) : "",
      bgColor: isSet(object.bgColor) ? globalThis.String(object.bgColor) : "",
      jumpLink: isSet(object.jumpLink) ? globalThis.String(object.jumpLink) : "",
    };
  },

  toJSON(message: ButtonStyle): unknown {
    const obj: any = {};
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.textColor !== "") {
      obj.textColor = message.textColor;
    }
    if (message.bgColor !== "") {
      obj.bgColor = message.bgColor;
    }
    if (message.jumpLink !== "") {
      obj.jumpLink = message.jumpLink;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ButtonStyle>, I>>(base?: I): ButtonStyle {
    return ButtonStyle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ButtonStyle>, I>>(object: I): ButtonStyle {
    const message = createBaseButtonStyle();
    message.text = object.text ?? "";
    message.textColor = object.textColor ?? "";
    message.bgColor = object.bgColor ?? "";
    message.jumpLink = object.jumpLink ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
