// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/app/playerunite/PGCAnyModel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Event } from "../../pgc/gateway/player/v2/Event";
import { PlayAbilityExtConf } from "../../pgc/gateway/player/v2/PlayAbilityExtConf";
import { PlayExtInfo } from "../../pgc/gateway/player/v2/PlayExtInfo";
import { PlayViewBusinessInfo } from "../../pgc/gateway/player/v2/PlayViewBusinessInfo";
import { ViewInfo } from "../../pgc/gateway/player/v2/ViewInfo";

export const protobufPackage = "bilibili.app.playerunite.pgcanymodel";

export interface PGCAnyModel {
  business: PlayViewBusinessInfo | undefined;
  event: Event | undefined;
  viewInfo: ViewInfo | undefined;
  playExtConf: PlayAbilityExtConf | undefined;
  playExtInfo: PlayExtInfo | undefined;
}

function createBasePGCAnyModel(): PGCAnyModel {
  return { business: undefined, event: undefined, viewInfo: undefined, playExtConf: undefined, playExtInfo: undefined };
}

export const PGCAnyModel: MessageFns<PGCAnyModel> = {
  encode(message: PGCAnyModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.business !== undefined) {
      PlayViewBusinessInfo.encode(message.business, writer.uint32(26).fork()).join();
    }
    if (message.event !== undefined) {
      Event.encode(message.event, writer.uint32(34).fork()).join();
    }
    if (message.viewInfo !== undefined) {
      ViewInfo.encode(message.viewInfo, writer.uint32(42).fork()).join();
    }
    if (message.playExtConf !== undefined) {
      PlayAbilityExtConf.encode(message.playExtConf, writer.uint32(50).fork()).join();
    }
    if (message.playExtInfo !== undefined) {
      PlayExtInfo.encode(message.playExtInfo, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PGCAnyModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePGCAnyModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3:
          if (tag !== 26) {
            break;
          }

          message.business = PlayViewBusinessInfo.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.event = Event.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.viewInfo = ViewInfo.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.playExtConf = PlayAbilityExtConf.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.playExtInfo = PlayExtInfo.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PGCAnyModel {
    return {
      business: isSet(object.business) ? PlayViewBusinessInfo.fromJSON(object.business) : undefined,
      event: isSet(object.event) ? Event.fromJSON(object.event) : undefined,
      viewInfo: isSet(object.viewInfo) ? ViewInfo.fromJSON(object.viewInfo) : undefined,
      playExtConf: isSet(object.playExtConf) ? PlayAbilityExtConf.fromJSON(object.playExtConf) : undefined,
      playExtInfo: isSet(object.playExtInfo) ? PlayExtInfo.fromJSON(object.playExtInfo) : undefined,
    };
  },

  toJSON(message: PGCAnyModel): unknown {
    const obj: any = {};
    if (message.business !== undefined) {
      obj.business = PlayViewBusinessInfo.toJSON(message.business);
    }
    if (message.event !== undefined) {
      obj.event = Event.toJSON(message.event);
    }
    if (message.viewInfo !== undefined) {
      obj.viewInfo = ViewInfo.toJSON(message.viewInfo);
    }
    if (message.playExtConf !== undefined) {
      obj.playExtConf = PlayAbilityExtConf.toJSON(message.playExtConf);
    }
    if (message.playExtInfo !== undefined) {
      obj.playExtInfo = PlayExtInfo.toJSON(message.playExtInfo);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PGCAnyModel>, I>>(base?: I): PGCAnyModel {
    return PGCAnyModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PGCAnyModel>, I>>(object: I): PGCAnyModel {
    const message = createBasePGCAnyModel();
    message.business = (object.business !== undefined && object.business !== null)
      ? PlayViewBusinessInfo.fromPartial(object.business)
      : undefined;
    message.event = (object.event !== undefined && object.event !== null) ? Event.fromPartial(object.event) : undefined;
    message.viewInfo = (object.viewInfo !== undefined && object.viewInfo !== null)
      ? ViewInfo.fromPartial(object.viewInfo)
      : undefined;
    message.playExtConf = (object.playExtConf !== undefined && object.playExtConf !== null)
      ? PlayAbilityExtConf.fromPartial(object.playExtConf)
      : undefined;
    message.playExtInfo = (object.playExtInfo !== undefined && object.playExtInfo !== null)
      ? PlayExtInfo.fromPartial(object.playExtInfo)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
