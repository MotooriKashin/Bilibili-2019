// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               v5.28.2
// source: src/io/com/bapis/bilibili/app/playerunite/PUGVAnyModel.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "bilibili.app.playerunite.pugvanymodel";

export enum EpisodeStatus {
  EPISODE_STATUS_UNSPECIFIED = 0,
  EPISODE_STATUS_TRY_WATCH_WHOLE = 1,
  EPISODE_STATUS_NOT_TRY_WATCH = 2,
  EPISODE_STATUS_TRY_WATCH_5_MINUTES = 3,
  UNRECOGNIZED = -1,
}

export function episodeStatusFromJSON(object: any): EpisodeStatus {
  switch (object) {
    case 0:
    case "EPISODE_STATUS_UNSPECIFIED":
      return EpisodeStatus.EPISODE_STATUS_UNSPECIFIED;
    case 1:
    case "EPISODE_STATUS_TRY_WATCH_WHOLE":
      return EpisodeStatus.EPISODE_STATUS_TRY_WATCH_WHOLE;
    case 2:
    case "EPISODE_STATUS_NOT_TRY_WATCH":
      return EpisodeStatus.EPISODE_STATUS_NOT_TRY_WATCH;
    case 3:
    case "EPISODE_STATUS_TRY_WATCH_5_MINUTES":
      return EpisodeStatus.EPISODE_STATUS_TRY_WATCH_5_MINUTES;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EpisodeStatus.UNRECOGNIZED;
  }
}

export function episodeStatusToJSON(object: EpisodeStatus): string {
  switch (object) {
    case EpisodeStatus.EPISODE_STATUS_UNSPECIFIED:
      return "EPISODE_STATUS_UNSPECIFIED";
    case EpisodeStatus.EPISODE_STATUS_TRY_WATCH_WHOLE:
      return "EPISODE_STATUS_TRY_WATCH_WHOLE";
    case EpisodeStatus.EPISODE_STATUS_NOT_TRY_WATCH:
      return "EPISODE_STATUS_NOT_TRY_WATCH";
    case EpisodeStatus.EPISODE_STATUS_TRY_WATCH_5_MINUTES:
      return "EPISODE_STATUS_TRY_WATCH_5_MINUTES";
    case EpisodeStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface PUGVAnyModel {
  seasonId: bigint;
  episodeId: bigint;
  status: EpisodeStatus;
  riskControl: RiskControl | undefined;
  playerMask: PlayerMask | undefined;
}

export interface RiskControl {
  needSendSms: boolean;
  title: string;
  riskMessage: string;
  actionDesc: string;
  sendSmsUrl: string;
  buvid: string;
}

export interface PlayerMask {
  title: string;
  prefix: string;
  suffix: string;
}

function createBasePUGVAnyModel(): PUGVAnyModel {
  return { seasonId: 0n, episodeId: 0n, status: 0, riskControl: undefined, playerMask: undefined };
}

export const PUGVAnyModel: MessageFns<PUGVAnyModel> = {
  encode(message: PUGVAnyModel, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.seasonId !== 0n) {
      if (BigInt.asIntN(64, message.seasonId) !== message.seasonId) {
        throw new globalThis.Error("value provided for field message.seasonId of type int64 too large");
      }
      writer.uint32(8).int64(message.seasonId);
    }
    if (message.episodeId !== 0n) {
      if (BigInt.asIntN(64, message.episodeId) !== message.episodeId) {
        throw new globalThis.Error("value provided for field message.episodeId of type int64 too large");
      }
      writer.uint32(16).int64(message.episodeId);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.riskControl !== undefined) {
      RiskControl.encode(message.riskControl, writer.uint32(34).fork()).join();
    }
    if (message.playerMask !== undefined) {
      PlayerMask.encode(message.playerMask, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PUGVAnyModel {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePUGVAnyModel();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.seasonId = reader.int64() as bigint;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.episodeId = reader.int64() as bigint;
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.riskControl = RiskControl.decode(reader, reader.uint32());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.playerMask = PlayerMask.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PUGVAnyModel {
    return {
      seasonId: isSet(object.seasonId) ? BigInt(object.seasonId) : 0n,
      episodeId: isSet(object.episodeId) ? BigInt(object.episodeId) : 0n,
      status: isSet(object.status) ? episodeStatusFromJSON(object.status) : 0,
      riskControl: isSet(object.riskControl) ? RiskControl.fromJSON(object.riskControl) : undefined,
      playerMask: isSet(object.playerMask) ? PlayerMask.fromJSON(object.playerMask) : undefined,
    };
  },

  toJSON(message: PUGVAnyModel): unknown {
    const obj: any = {};
    if (message.seasonId !== 0n) {
      obj.seasonId = message.seasonId.toString();
    }
    if (message.episodeId !== 0n) {
      obj.episodeId = message.episodeId.toString();
    }
    if (message.status !== 0) {
      obj.status = episodeStatusToJSON(message.status);
    }
    if (message.riskControl !== undefined) {
      obj.riskControl = RiskControl.toJSON(message.riskControl);
    }
    if (message.playerMask !== undefined) {
      obj.playerMask = PlayerMask.toJSON(message.playerMask);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PUGVAnyModel>, I>>(base?: I): PUGVAnyModel {
    return PUGVAnyModel.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PUGVAnyModel>, I>>(object: I): PUGVAnyModel {
    const message = createBasePUGVAnyModel();
    message.seasonId = object.seasonId ?? 0n;
    message.episodeId = object.episodeId ?? 0n;
    message.status = object.status ?? 0;
    message.riskControl = (object.riskControl !== undefined && object.riskControl !== null)
      ? RiskControl.fromPartial(object.riskControl)
      : undefined;
    message.playerMask = (object.playerMask !== undefined && object.playerMask !== null)
      ? PlayerMask.fromPartial(object.playerMask)
      : undefined;
    return message;
  },
};

function createBaseRiskControl(): RiskControl {
  return { needSendSms: false, title: "", riskMessage: "", actionDesc: "", sendSmsUrl: "", buvid: "" };
}

export const RiskControl: MessageFns<RiskControl> = {
  encode(message: RiskControl, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.needSendSms !== false) {
      writer.uint32(8).bool(message.needSendSms);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.riskMessage !== "") {
      writer.uint32(26).string(message.riskMessage);
    }
    if (message.actionDesc !== "") {
      writer.uint32(34).string(message.actionDesc);
    }
    if (message.sendSmsUrl !== "") {
      writer.uint32(42).string(message.sendSmsUrl);
    }
    if (message.buvid !== "") {
      writer.uint32(50).string(message.buvid);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RiskControl {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRiskControl();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.needSendSms = reader.bool();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.riskMessage = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.actionDesc = reader.string();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sendSmsUrl = reader.string();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.buvid = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RiskControl {
    return {
      needSendSms: isSet(object.needSendSms) ? globalThis.Boolean(object.needSendSms) : false,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      riskMessage: isSet(object.riskMessage) ? globalThis.String(object.riskMessage) : "",
      actionDesc: isSet(object.actionDesc) ? globalThis.String(object.actionDesc) : "",
      sendSmsUrl: isSet(object.sendSmsUrl) ? globalThis.String(object.sendSmsUrl) : "",
      buvid: isSet(object.buvid) ? globalThis.String(object.buvid) : "",
    };
  },

  toJSON(message: RiskControl): unknown {
    const obj: any = {};
    if (message.needSendSms !== false) {
      obj.needSendSms = message.needSendSms;
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.riskMessage !== "") {
      obj.riskMessage = message.riskMessage;
    }
    if (message.actionDesc !== "") {
      obj.actionDesc = message.actionDesc;
    }
    if (message.sendSmsUrl !== "") {
      obj.sendSmsUrl = message.sendSmsUrl;
    }
    if (message.buvid !== "") {
      obj.buvid = message.buvid;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RiskControl>, I>>(base?: I): RiskControl {
    return RiskControl.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RiskControl>, I>>(object: I): RiskControl {
    const message = createBaseRiskControl();
    message.needSendSms = object.needSendSms ?? false;
    message.title = object.title ?? "";
    message.riskMessage = object.riskMessage ?? "";
    message.actionDesc = object.actionDesc ?? "";
    message.sendSmsUrl = object.sendSmsUrl ?? "";
    message.buvid = object.buvid ?? "";
    return message;
  },
};

function createBasePlayerMask(): PlayerMask {
  return { title: "", prefix: "", suffix: "" };
}

export const PlayerMask: MessageFns<PlayerMask> = {
  encode(message: PlayerMask, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.prefix !== "") {
      writer.uint32(18).string(message.prefix);
    }
    if (message.suffix !== "") {
      writer.uint32(26).string(message.suffix);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayerMask {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayerMask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.prefix = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.suffix = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayerMask {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      prefix: isSet(object.prefix) ? globalThis.String(object.prefix) : "",
      suffix: isSet(object.suffix) ? globalThis.String(object.suffix) : "",
    };
  },

  toJSON(message: PlayerMask): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.prefix !== "") {
      obj.prefix = message.prefix;
    }
    if (message.suffix !== "") {
      obj.suffix = message.suffix;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PlayerMask>, I>>(base?: I): PlayerMask {
    return PlayerMask.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PlayerMask>, I>>(object: I): PlayerMask {
    const message = createBasePlayerMask();
    message.title = object.title ?? "";
    message.prefix = object.prefix ?? "";
    message.suffix = object.suffix ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | bigint | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
